import logging

import telegram
from transliterate import translit
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    CommandHandler,
    CallbackQueryHandler,
    ConversationHandler, Application,
)

import email, smtplib, ssl

from email import encoders
from email.mime.base import MIMEBase
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText

import csv
import pymongo
import asyncio
from pymongo import MongoClient
import logging
from typing import Dict
from telegram import ReplyKeyboardMarkup, ReplyKeyboardRemove, Update
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    ConversationHandler,
    MessageHandler,
    filters,
)
import pandas as pd

MONGODB_LINK = "mongodb+srv://urfubot:Maksiz03@cluster0.hfhv7m8.mongodb.net/"
MONGO_DB = "urfubot"
mdb = MongoClient(MONGODB_LINK)[MONGO_DB]

# –í–µ–¥–µ–Ω–∏–µ –∂—É—Ä–Ω–∞–ª–∞ –ª–æ–≥–æ–≤
# logging.basicConfig(
#     format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
# )

# logger = logging.getLogger(__name__)

CHOOSING, TYPING_REPLY, TYPING_CHOICE = range(3)
# –≠—Ç–∞–ø—ã/—Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
FIRST, SECOND = range(2)

INFO = range(1)
# –î–∞–Ω–Ω—ã–µ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
START_OVER, END, \
C_Q_1, C_Q_2_1, C_Q_2_2, C_Q_3_1, C_Q_3_2, C_Q_3_3, C_Q_4_1, C_Q_4_2, C_Q_4_3, C_Q_4_4, C_Q_5_1, C_Q_5_2, C_Q_6_1, C_Q_6_2, C_Q_7_1, C_Q_7_2, C_Q_8_1, C_Q_8_2, \
C_E_1, C_E_2, C_E_3, \
S_Q_1, S_Q_2_1, S_Q_2_2, S_Q_2_3, S_Q_2_4, S_Q_3_1, S_Q_3_2, S_Q_4_1, S_Q_4_2, S_Q_4_3, S_Q_4_4, \
S_Q_5_1_1, S_Q_5_1_2, S_Q_5_2_1, S_Q_5_2_2, S_Q_5_3_1, S_Q_5_3_2, S_Q_5_4_1, S_Q_5_4_2, \
S_E_1_1, S_E_1_2, S_E_2_1, S_E_2_2, S_E_3_1, S_E_3_2, \
R_Q_1, R_Q_2_1, R_Q_2_2, R_Q_2_3, R_Q_3_1_1, R_Q_3_1_2, R_Q_3_2, R_Q_4_1_1, R_Q_4_1_2, \
R_Q_4_2_1, R_Q_4_2_2, R_Q_5_1, R_Q_5_2_1, R_Q_5_2_2, R_Q_6_1_1, R_Q_6_1_2, R_Q_6_2_1, R_Q_6_2_2, \
R_E_1, R_E_2_1, R_E_2_2, R_E_3 = range(70)

dict_metod = {0: START_OVER, 1: END, 2: C_Q_1, 3: C_Q_2_1, 4: C_Q_2_2, 5: C_Q_3_1, 6: C_Q_3_2, 7: C_Q_3_3, 8: C_Q_4_1,
              9: C_Q_4_2,
              10: C_Q_4_3, 11: C_Q_4_4, 12: C_Q_5_1, 13: C_Q_5_2, 14: C_Q_6_1, 15: C_Q_6_2, 16: C_Q_7_1, 17: C_Q_7_2,
              18: C_Q_8_1, 19: C_Q_8_2,
              20: None, 21: None, 22: None, 23: S_Q_1, 24: S_Q_2_1, 25: S_Q_2_2, 26: S_Q_2_3, 27: S_Q_2_4, 28: S_Q_3_1,
              29: S_Q_3_2, 30: S_Q_4_1, 31: S_Q_4_2, 32: S_Q_4_3,
              33: S_Q_4_4, 34: S_Q_5_1_1, 35: S_Q_5_1_2, 36: S_Q_5_2_1, 37: S_Q_5_2_2, 38: S_Q_5_3_1, 39: S_Q_5_3_2,
              40: S_Q_5_4_1, 41: S_Q_5_4_2,
              42: S_E_1_1, 43: S_E_1_2, 44: S_E_2_1, 45: S_E_2_2, 46: S_E_3_1, 47: S_E_3_2,
              48: R_Q_1, 49: R_Q_2_1, 50: R_Q_2_2, 51: R_Q_2_3, 52: R_Q_3_1_1, 53: R_Q_3_1_2, 54: R_Q_3_2,
              55: R_Q_4_1_1, 56: R_Q_4_1_2,
              57: R_Q_4_2_1, 58: R_Q_4_2_2, 59: R_Q_5_1, 60: R_Q_5_2_1, 61: R_Q_5_2_2, 62: R_Q_6_1_1, 63: R_Q_6_1_2,
              64: R_Q_6_2_1, 65: R_Q_6_2_2}

dict_query = {0: 0}
dict_anketa = {'–í–∞—à–µ –§–ò–û': None,'–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞':None,'–§–ò–û —Ä–µ–±–µ–Ω–∫–∞':None,'–í–æ–∑—Ä–∞—Å—Ç —Ä–µ–±–µ–Ω–∫–∞ –≤ –º–µ—Å—è—Ü–∞—Ö':None}
dict_mongo = {'–í —Ç–µ—á–µ–Ω–∏–µ –∫–∞–∫–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—Ä—ã–≥–∏–≤–∞–Ω–∏—è –±–µ—Å–ø–æ–∫–æ—è—Ç –í–∞—à–µ–≥–æ —Ä–µ–±–µ–Ω–∫–∞?': None,
              '–ö–∞–∫–æ–π –æ–±—ä–µ–º –æ–¥–Ω–æ–≥–æ —Å—Ä—ã–≥–∏–≤–∞–Ω–∏—è?': None,
              '–ö–∞–∫–æ–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Å—Ä—ã–≥–∏–≤–∞–Ω–∏—è?': None,
              '–ï—Å—Ç—å –ª–∏ —É –í–∞—à–µ–≥–æ —Ä–µ–±–µ–Ω–∫–∞ –æ–¥–Ω–∞ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–∑ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω—ã—Ö –∂–∞–ª–æ–±- —Å–Ω–∏–∂–µ–Ω–∏–µ –º–∞—Å—Å—ã —Ç–µ–ª–∞; —Ä–≤–æ—Ç–∞ —Ñ–æ–Ω—Ç–∞–Ω–æ–º; —Ä–≤–æ—Ç–∞ —Å –ø—Ä–∏–º–µ—Å—å—é –∫—Ä–æ–≤–∏ –∏–ª–∏ –∂–µ–ª—á–∏?': None,
              '–ß–µ—Ä–µ–∑ –∫–∞–∫–æ–µ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ –∫–æ—Ä–º–ª–µ–Ω–∏—è –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Å—Ä—ã–≥–∏–≤–∞–Ω–∏–µ?': None,
              '–ö–∞–∫ —á–∞—Å—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Å—Ä—ã–≥–∏–≤–∞–Ω–∏–µ?': None,
              '–ö–∞–∫ —á–∞—Å—Ç–æ –í–∞—à–µ–≥–æ —Ä–µ–±–µ–Ω–∫–∞ –±–µ—Å–ø–æ–∫–æ—è—Ç –∫–æ–ª–∏–∫–∏?': None,
              '–í —Ç–µ—á–µ–Ω–∏–µ –∫–∞–∫–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –í–∞—à–µ–≥–æ —Ä–µ–±–µ–Ω–∫–∞ –±–µ—Å–ø–æ–∫–æ—è—Ç –∫–æ–ª–∏–∫–∏?': None,
              '–í –∫–∞–∫–æ–µ –≤—Ä–µ–º—è —Å—É—Ç–æ–∫ –±–µ—Å–ø–æ–∫–æ—è—Ç –∫–æ–ª–∏–∫–∏?': None,
              '–ï—Å—Ç—å –ª–∏ —Å–≤—è–∑—å –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è –∫–æ–ª–∏–∫ —Å –ø—Ä–∏–µ–º–æ–º –ø–∏—â–∏?': None,
              '–ü—Ä–æ—Ö–æ–¥—è—Ç –ª–∏ –∫–æ–ª–∏–∫–∏ –ø–æ—Å–ª–µ —Å—Ç—É–ª–∞?': None,
              '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–¥–Ω–æ–≥–æ —ç–ø–∏–∑–æ–¥–∞ –∫–æ–ª–∏–∫?': None,
              '–ï—Å—Ç—å –ª–∏ —É –í–∞—à–µ–≥–æ —Ä–µ–±–µ–Ω–∫–∞ –æ–¥–Ω–∞ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–∑ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω—ã—Ö –∂–∞–ª–æ–±- –£–ø–æ—Ä–Ω—ã–π –∫—Ä–∏–∫ —Å –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏; –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ —Ä–≤–æ—Ç—ã; —Ä–≤–æ—Ç–∞ —Å –∫—Ä–æ–≤—å—é; –∫—Ä–æ–≤—å –≤ —Å—Ç—É–ª–µ; –ø–æ—Ç–µ—Ä—è –º–∞—Å—Å—ã —Ç–µ–ª–∞; –∑–∞–¥–µ—Ä–∂–∫–∞ —Ä–æ—Å—Ç–∞; –ª–∏—Ö–æ—Ä–∞–¥–∫–∞ (–ø–æ–≤—ã—à–µ–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã)?': None,
              '–ó–∞ –ø—Ä–æ—à–µ–¥—à–∏–π –º–µ—Å—è—Ü –≤ —Å—Ä–µ–¥–Ω–µ–º —Å–∫–æ–ª—å–∫–æ –¥–µ—Ñ–µ–∫–∞—Ü–∏–π –≤ –Ω–µ–¥–µ–ª—é –±—ã–ª–æ —É –í–∞—à–µ–≥–æ —Ä–µ–±–µ–Ω–∫–∞?': None,
              '–ï—Å—Ç—å –ª–∏ —É –í–∞—à–µ–≥–æ —Ä–µ–±–µ–Ω–∫–∞ –æ–¥–Ω–∞ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–∑ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω—ã—Ö –∂–∞–ª–æ–±- —Å—É—Ö–æ—Å—Ç—å –∫–æ–∂–∏ –∏ —Å–ª–∏–∑–∏—Å—Ç—ã—Ö; —Ä–µ–¥–∫–æ–µ –º–æ—á–µ–∏—Å–ø—É—Å–∫–∞–Ω–∏–µ; —è–∑—ã–∫ –æ–±–ª–æ–∂–µ–Ω –±–µ–ª—ã–º –Ω–∞–ª–µ—Ç–æ–º; —Å–ª–∞–±–æ—Å—Ç—å –∏ —Å–æ–Ω–ª–∏–≤–æ—Å—Ç—å; –∑–∞–ø–∞–¥–µ–Ω–∏–µ —Ä–æ–¥–Ω–∏—á–∫–∞?': None,
              '–ù–∞ –∫–∞–∫–æ–º –≤—Å–∫–∞—Ä–º–ª–∏–≤–∞–Ω–∏–∏ –í–∞—à —Ä–µ–±–µ–Ω–æ–∫?': None,
              '–í —Ç–µ—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –º–µ—Å—è—Ü–∞ –í–∞—à —Ä–µ–±–µ–Ω–æ–∫ —Å–∏–ª—å–Ω–æ —Ç—É–∂–∏–ª—Å—è –≤–æ –≤—Ä–µ–º—è –¥–µ—Ñ–µ–∫–∞—Ü–∏–∏?': None,
              '–ö–∞–∫–æ–π –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ü–∏–∏ –±—ã–ª —Å—Ç—É–ª —É –í–∞—à —Ä–µ–±–µ–Ω–æ–∫ –∑–∞ –ø—Ä–æ—à–µ–¥—à–∏–π –º–µ—Å—è—Ü?': None
              }
global user_data1
recommendations = ''

reply_keyboard = [
    ["–í–∞—à–µ –§–ò–û", "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"],
    ["–§–ò–û —Ä–µ–±–µ–Ω–∫–∞", "–í–æ–∑—Ä–∞—Å—Ç —Ä–µ–±–µ–Ω–∫–∞ –≤ –º–µ—Å—è—Ü–∞—Ö"],
    ['–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–æ—Ç?'],
    ["–î–∞–ª–µ–µ"]
]
markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True)


def facts_to_str(user_data: Dict[str, str]) -> str:
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    —Å–æ–±—Ä–∞–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ."""
    facts = [f"{key} - {value}" for key, value in user_data.items()]
    return "\n".join(facts).join(["\n", "\n"])


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—áv–∞–ª–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞, –ø—Ä–æ—Å—å–±–∞ –≤–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ."""
    global recommendations
    recommendations = ''
    user = search_or_save_user(mdb, update.effective_user)

    await update.message.reply_text(
        text="–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –±–æ—Ç - –ê–π–ë–æ–ª–∏—Ç! –ü–æ—Å–ª–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –æ–ø—Ä–æ—Å–∞ —è –≤—ã–¥–∞–º "
             "–≤–∞–º –Ω–µ —Ç–æ–ª—å–∫–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –ø–æ–º–æ—á—å –≤–∞—à–µ–º—É –º–∞–ª—ã—à—É, –Ω–æ –∏ —Å–æ–±–µ—Ä—É "
             "–≤—Å–µ —Å–∏–º–ø—Ç–æ–º—ã –≤ –æ–¥–∏–Ω —Ñ–∞–π–ª, —á—Ç–æ–±—ã –≤—ã –º–æ–≥–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–≥–æ —Å–≤–æ–µ–º—É –≤—Ä–∞—á—É.",
        reply_markup=markup
    )
    return CHOOSING


async def regular_choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ó–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –ø—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º –≤—ã–±–æ—Ä–µ."""
    text = update.message.text
    context.user_data["choice"] = text
    await update.message.reply_text(f"–ù–∞–ø–∏—à–∏—Ç–µ {text}")
    return TYPING_REPLY


async def custom_choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ó–∞–ø—Ä–æ—Å –æ–ø–∏—Å–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏."""
    await update.message.reply_text(
        '–ù–∞–ø–∏—à–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç –≤–∞—à–µ–≥–æ —Ä–µ–±–µ–Ω–∫–∞ –≤ –º–µ—Å—è—Ü–∞—Ö'
    )
    return TYPING_CHOICE


async def received_information(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Store info provided by user and ask for the next category."""
    user_data = context.user_data
    text = update.message.text
    category = user_data["choice"]
    user_data[category] = text
    dict_anketa[category] = text
    del user_data["choice"]

    await update.message.reply_text(
        f"{facts_to_str(user_data)}",
        reply_markup=markup,
    )

    return CHOOSING


async def dbR_Q_1(update, _):
    await asyncio.sleep(0)
    user = search_or_save_user(mdb, update.effective_user)
    savebd = save_user_bd(mdb, user, '–ö–∞–∫–∏–µ –∂–∞–ª–æ–±—ã –±–µ—Å–ø–æ–∫–æ—è—Ç –í–∞—à–µ–≥–æ —Ä–µ–±–µ–Ω–∫–∞?', '–°—Ä—ã–≥–∏–≤–∞–Ω–∏—è')
    print(savebd)


async def info(update, _):
    await update.message.reply_text(
        '–î–∞–≤–∞–π—Ç–µ –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è –ø–æ–±–ª–∏–∂–µ! –Ø - –±–æ—Ç –ê–π–±–æ–ª–∏—Ç, —Ä–∞–±–æ—Ç–∞ –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø–æ–º–æ—â—å —Ä–æ–¥–∏—Ç–µ–ª—è–º –º–ª–∞–¥–µ–Ω—Ü–µ–≤. –Ø –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—é –í–∞–º –æ–ø—Ä–æ—Å –ø–æ —Ç—Ä—ë–º –ø—É–Ω–∫—Ç–∞–º, –ø—Ä–æ–π–¥—è –∫–æ—Ç–æ—Ä—ã–π –í—ã –ø–æ–ª—É—á–∏—Ç–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.–ú—ã –Ω–µ —Ç–æ–ª—å–∫–æ –ø–æ–º–æ–∂–µ–º –í–∞–º —Å–æ–≤–µ—Ç–æ–º, –Ω–æ –∏ –Ω–∞–ø—Ä–∞–≤–∏–º –∫ –≤—Ä–∞—á—É, –≤ —Å–ª—É—á–∞–µ –≤—ã—è–≤–ª–µ–Ω–∏—è –ø–ª–æ—Ö–∏—Ö —Å–∏–º–ø—Ç–æ–º–æ–≤.–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –±—É–¥—É—Ç –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω—ã –≤ excel-—Ñ–∞–π–ª –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤—Ä–∞—á—É. \n \nüí° –ß—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å –æ–ø—Ä–æ—Å, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É "/start".\nüí° –í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ–π –æ—Ç–≤–µ—Ç, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥".\nüí° –ü–µ—Ä–µ–π–¥—è –ø–æ –∫–Ω–æ–ø–∫–µ "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –≤—Ä–∞—á—É –ø–µ–¥–∏–∞—Ç—Ä—É" –í—ã –ø–æ–ª—É—á–∏—Ç–µ –æ–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤—Å–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º, –∞ —Ñ–∞–π–ª —Å –æ—Ç–≤–µ—Ç–∞–º–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—Å—è –≤—Ä–∞—á—É.\n\n‚ùó–ü–æ–ª—É—á–µ–Ω–Ω—ã–π excel-—Ñ–∞–π–ª –±—É–¥–µ—Ç –Ω–∞–∑–≤–∞–Ω –í–∞—à–∏–º–∏ –§–ò–û, –ø–æ—ç—Ç–æ–º—É –Ω–µ –ø—Ä–æ–ø—É—Å–∫–∞–π—Ç–µ –¥–∞–Ω–Ω—ã–π —ç—Ç–∞–ø, —á—Ç–æ–±—ã –≤—Ä–∞—á –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º —Å–º–æ–≥ –Ω–∞–π—Ç–∏ –í–∞—à–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.\n\n–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—â–∞—Ç—å—Å—è –Ω–∞ –ø–æ—á—Ç—É: tatianamartynova@yandex.ru', reply_markup=markup
    )
    return CHOOSING


async def firstQue(update, _):
    user = search_or_save_user(mdb, update.effective_user)
    anketa = save_user_anketa(mdb, user)
    """–í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ –∫–æ–º–∞–Ω–¥–µ `/start`."""
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–ø—É—Å—Ç–∏–ª –∫–æ–º–∞–Ω–¥—É `/start`
    global recommendations
    recommendations = ''
    user = update.message.from_user
    # logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –Ω–∞—á–∞–ª —Ä–∞–∑–≥–æ–≤–æ—Ä", user.first_name)
    # –°–æ–∑–¥–∞–µ–º `InlineKeyboard`, –≥–¥–µ –∫–∞–∂–¥–∞—è –∫–Ω–æ–ø–∫–∞ –∏–º–µ–µ—Ç
    # –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç –∏ —Å—Ç—Ä–æ–∫—É `callback_data`
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ - —ç—Ç–æ —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ –∫–Ω–æ–ø–æ–∫, –≥–¥–µ –∫–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞,
    # –≤ —Å–≤–æ—é –æ—á–µ—Ä–µ–¥—å, —è–≤–ª—è–µ—Ç—Å—è —Å–ø–∏—Å–∫–æ–º `[[...]]`
    keyboard = [
        [
            InlineKeyboardButton("–°—Ä—ã–≥–∏–≤–∞–Ω–∏—è", callback_data=str(R_Q_1))
        ],
        [
            InlineKeyboardButton("–ö–æ–ª–∏–∫–∏", callback_data=str(C_Q_1))
        ],
        [
            InlineKeyboardButton("–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç—É–ª–∞: –∑–∞–ø–æ—Ä—ã –∏–ª–∏ —É—á–∞—â–µ–Ω–Ω—ã–π", callback_data=str(S_Q_1))
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º –∏ –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π `reply_markup`
    await update.message.reply_text(
        text="–ö–∞–∫–∏–µ –∂–∞–ª–æ–±—ã –±–µ—Å–ø–æ–∫–æ—è—Ç –í–∞—à–µ–≥–æ —Ä–µ–±–µ–Ω–∫–∞?", reply_markup=reply_markup
    )
    # –°–æ–æ–±—â–∞–µ–º `ConversationHandler`, —á—Ç–æ —Å–µ–π—á–∞—Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ `FIRST`

    return FIRST


async def colic_q_1(update, _):
    """–ü–æ–∫–∞–∑ –Ω–æ–≤–æ–≥–æ –≤—ã–±–æ—Ä–∞ –∫–Ω–æ–ø–æ–∫"""
    num = question_number(update.callback_query.data)
    query = update.callback_query
    await query.answer()
    keyboard = [
        [
            InlineKeyboardButton("–ú–µ–Ω–µ–µ 3-—Ö —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é", callback_data=str(C_Q_2_1))
        ],
        [
            InlineKeyboardButton("–ë–æ–ª–µ–µ 4-—Ö —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é", callback_data=str(C_Q_2_2))
        ],
        [
            InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=str(START_OVER))
        ],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        text="–ö–∞–∫ —á–∞—Å—Ç–æ –í–∞—à–µ–≥–æ —Ä–µ–±–µ–Ω–∫–∞ –±–µ—Å–ø–æ–∫–æ—è—Ç –∫–æ–ª–∏–∫–∏?", reply_markup=reply_markup
    )
    return FIRST


async def colic_q_2_1(update, _):
    """–ü–æ–∫–∞–∑ –Ω–æ–≤–æ–≥–æ –≤—ã–±–æ—Ä–∞ –∫–Ω–æ–ø–æ–∫"""
    num = question_number(update.callback_query.data)
    # user = search_or_save_user(mdb, update.effective_user)
    # savebd = save_user_bd(mdb, user,'–ö–æ–ª–∏–∫–∏', '–ö–∞–∫ —á–∞—Å—Ç–æ –í–∞—à–µ–≥–æ —Ä–µ–±–µ–Ω–∫–∞ –±–µ—Å–ø–æ–∫–æ—è—Ç –∫–æ–ª–∏–∫–∏?', '–ú–µ–Ω–µ–µ 3-—Ö —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é')
    dict_mongo["–ö–∞–∫ —á–∞—Å—Ç–æ –í–∞—à–µ–≥–æ —Ä–µ–±–µ–Ω–∫–∞ –±–µ—Å–ø–æ–∫–æ—è—Ç –∫–æ–ª–∏–∫–∏?"] = "–ú–µ–Ω–µ–µ 3-—Ö —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é"
    query = update.callback_query
    await query.answer()
    keyboard = [
        [
            InlineKeyboardButton("–ú–µ–Ω–µ–µ 1 –Ω–µ–¥–µ–ª–∏", callback_data=str(C_Q_3_1))
        ],
        [
            InlineKeyboardButton("–ú–µ–Ω–µ–µ 2-—Ö –Ω–µ–¥–µ–ª—å", callback_data=str(C_Q_3_2))
        ],
        [
            InlineKeyboardButton("–ë–æ–ª–µ–µ 2-—Ö –Ω–µ–¥–µ–ª—å", callback_data=str(C_Q_3_3))
        ],
        [
            InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=str(C_Q_1))
        ],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        text="–í —Ç–µ—á–µ–Ω–∏–µ –∫–∞–∫–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –í–∞—à–µ–≥–æ —Ä–µ–±–µ–Ω–∫–∞ –±–µ—Å–ø–æ–∫–æ—è—Ç –∫–æ–ª–∏–∫–∏?", reply_markup=reply_markup
    )
    return FIRST


async def colic_q_2_2(update, _):
    """–ü–æ–∫–∞–∑ –Ω–æ–≤–æ–≥–æ –≤—ã–±–æ—Ä–∞ –∫–Ω–æ–ø–æ–∫"""
    num = question_number(update.callback_query.data)
    dict_mongo["–ö–∞–∫ —á–∞—Å—Ç–æ –í–∞—à–µ–≥–æ —Ä–µ–±–µ–Ω–∫–∞ –±–µ—Å–ø–æ–∫–æ—è—Ç –∫–æ–ª–∏–∫–∏?"] = "–ú–µ–Ω–µ–µ 4-—Ö —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é"
    print(update.callback_query)
    query = update.callback_query
    await query.answer()
    keyboard = [
        [
            InlineKeyboardButton("–ú–µ–Ω–µ–µ 1 –Ω–µ–¥–µ–ª–∏", callback_data=str(C_Q_3_1))
        ],
        [
            InlineKeyboardButton("–ú–µ–Ω–µ–µ 2-—Ö –Ω–µ–¥–µ–ª—å", callback_data=str(C_Q_3_2))
        ],
        [
            InlineKeyboardButton("–ë–æ–ª–µ–µ 2-—Ö –Ω–µ–¥–µ–ª—å", callback_data=str(C_Q_3_3))
        ],
        [
            InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=str(C_Q_1))
        ],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        text="–í —Ç–µ—á–µ–Ω–∏–µ –∫–∞–∫–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –í–∞—à–µ–≥–æ —Ä–µ–±–µ–Ω–∫–∞ –±–µ—Å–ø–æ–∫–æ—è—Ç –∫–æ–ª–∏–∫–∏?", reply_markup=reply_markup
    )
    return FIRST


async def colic_q_3_1(update, _):
    """–ü–æ–∫–∞–∑ –Ω–æ–≤–æ–≥–æ –≤—ã–±–æ—Ä–∞ –∫–Ω–æ–ø–æ–∫"""
    num = question_number(update.callback_query.data)
    num = int(num)
    print(dict_metod[dict_query[num]])
    dict_mongo["–í —Ç–µ—á–µ–Ω–∏–µ –∫–∞–∫–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –í–∞—à–µ–≥–æ —Ä–µ–±–µ–Ω–∫–∞ –±–µ—Å–ø–æ–∫–æ—è—Ç –∫–æ–ª–∏–∫–∏?"] = "–ú–µ–Ω–µ–µ 1 –Ω–µ–¥–µ–ª–∏"
    query = update.callback_query
    await query.answer()
    keyboard = [
        [
            InlineKeyboardButton("–£—Ç—Ä–æ", callback_data=str(C_Q_4_1))
        ],
        [
            InlineKeyboardButton("–î–µ–Ω—å", callback_data=str(C_Q_4_2))
        ],
        [
            InlineKeyboardButton("–í–µ—á–µ—Ä", callback_data=str(C_Q_4_3))
        ],
        [
            InlineKeyboardButton("–ù–æ—á—å", callback_data=str(C_Q_4_4))
        ],
        [
            InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=str(dict_metod[dict_query[num]]))
        ],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        text="–í –∫–∞–∫–æ–µ –≤—Ä–µ–º—è —Å—É—Ç–æ–∫ –±–µ—Å–ø–æ–∫–æ—è—Ç –∫–æ–ª–∏–∫–∏?", reply_markup=reply_markup
    )
    return FIRST


async def colic_q_3_2(update, _):
    num = question_number(update.callback_query.data)
    num = int(num)
    print(dict_metod[dict_query[num]])
    """–ü–æ–∫–∞–∑ –Ω–æ–≤–æ–≥–æ –≤—ã–±–æ—Ä–∞ –∫–Ω–æ–ø–æ–∫"""
    dict_mongo["–í —Ç–µ—á–µ–Ω–∏–µ –∫–∞–∫–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –í–∞—à–µ–≥–æ —Ä–µ–±–µ–Ω–∫–∞ –±–µ—Å–ø–æ–∫–æ—è—Ç –∫–æ–ª–∏–∫–∏?"] = "–ú–µ–Ω–µ–µ 2-—Ö –Ω–µ–¥–µ–ª—å"

    query = update.callback_query
    await query.answer()
    keyboard = [
        [
            InlineKeyboardButton("–£—Ç—Ä–æ", callback_data=str(C_Q_4_1))
        ],
        [
            InlineKeyboardButton("–î–µ–Ω—å", callback_data=str(C_Q_4_2))
        ],
        [
            InlineKeyboardButton("–í–µ—á–µ—Ä", callback_data=str(C_Q_4_3))
        ],
        [
            InlineKeyboardButton("–ù–æ—á—å", callback_data=str(C_Q_4_4))
        ],
        [
            InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=str(dict_metod[dict_query[num]]))
        ],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        text="–í –∫–∞–∫–æ–µ –≤—Ä–µ–º—è —Å—É—Ç–æ–∫ –±–µ—Å–ø–æ–∫–æ—è—Ç –∫–æ–ª–∏–∫–∏?", reply_markup=reply_markup
    )
    return FIRST


async def colic_q_3_3(update, _):
    num = question_number(update.callback_query.data)
    num = int(num)
    print(dict_metod[dict_query[num]])
    """–ü–æ–∫–∞–∑ –Ω–æ–≤–æ–≥–æ –≤—ã–±–æ—Ä–∞ –∫–Ω–æ–ø–æ–∫"""
    dict_mongo["–í —Ç–µ—á–µ–Ω–∏–µ –∫–∞–∫–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –í–∞—à–µ–≥–æ —Ä–µ–±–µ–Ω–∫–∞ –±–µ—Å–ø–æ–∫–æ—è—Ç –∫–æ–ª–∏–∫–∏?"] = "–ë–æ–ª–µ–µ 2-—Ö –Ω–µ–¥–µ–ª—å"
    query = update.callback_query
    await query.answer()
    keyboard = [
        [
            InlineKeyboardButton("–£—Ç—Ä–æ", callback_data=str(C_Q_4_1))
        ],
        [
            InlineKeyboardButton("–î–µ–Ω—å", callback_data=str(C_Q_4_2))
        ],
        [
            InlineKeyboardButton("–í–µ—á–µ—Ä", callback_data=str(C_Q_4_3))
        ],
        [
            InlineKeyboardButton("–ù–æ—á—å", callback_data=str(C_Q_4_4))
        ],
        [
            InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=str(dict_metod[dict_query[num]]))
        ],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        text="–í –∫–∞–∫–æ–µ –≤—Ä–µ–º—è —Å—É—Ç–æ–∫ –±–µ—Å–ø–æ–∫–æ—è—Ç –∫–æ–ª–∏–∫–∏?", reply_markup=reply_markup
    )
    return FIRST


async def colic_q_4_1(update, _):
    """–ü–æ–∫–∞–∑ –Ω–æ–≤–æ–≥–æ –≤—ã–±–æ—Ä–∞ –∫–Ω–æ–ø–æ–∫"""
    num = question_number(update.callback_query.data)
    num = int(num)
    dict_mongo["–í –∫–∞–∫–æ–µ –≤—Ä–µ–º—è —Å—É—Ç–æ–∫ –±–µ—Å–ø–æ–∫–æ—è—Ç –∫–æ–ª–∏–∫–∏?"] = "–£—Ç—Ä–æ"
    query = update.callback_query
    await query.answer()
    keyboard = [
        [
            InlineKeyboardButton("–î–∞", callback_data=str(C_Q_5_1))
        ],
        [
            InlineKeyboardButton("–ù–µ—Ç", callback_data=str(C_Q_5_2))
        ],
        [
            InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=str(dict_metod[dict_query[num]]))
        ],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        text="–ï—Å—Ç—å –ª–∏ —Å–≤—è–∑—å –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è –∫–æ–ª–∏–∫ —Å –ø—Ä–∏–µ–º–æ–º –ø–∏—â–∏?", reply_markup=reply_markup
    )
    return FIRST


async def colic_q_4_2(update, _):
    num = question_number(update.callback_query.data)
    num = int(num)
    """–ü–æ–∫–∞–∑ –Ω–æ–≤–æ–≥–æ –≤—ã–±–æ—Ä–∞ –∫–Ω–æ–ø–æ–∫"""
    dict_mongo["–í –∫–∞–∫–æ–µ –≤—Ä–µ–º—è —Å—É—Ç–æ–∫ –±–µ—Å–ø–æ–∫–æ—è—Ç –∫–æ–ª–∏–∫–∏?"] = "–î–µ–Ω—å"
    query = update.callback_query
    await query.answer()
    keyboard = [
        [
            InlineKeyboardButton("–î–∞", callback_data=str(C_Q_5_1))
        ],
        [
            InlineKeyboardButton("–ù–µ—Ç", callback_data=str(C_Q_5_2))
        ],
        [
            InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=str(dict_metod[dict_query[num]]))
        ],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        text="–ï—Å—Ç—å –ª–∏ —Å–≤—è–∑—å –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è –∫–æ–ª–∏–∫ —Å –ø—Ä–∏–µ–º–æ–º –ø–∏—â–∏?", reply_markup=reply_markup
    )
    return FIRST


async def colic_q_4_3(update, _):
    num = question_number(update.callback_query.data)
    num = int(num)
    """–ü–æ–∫–∞–∑ –Ω–æ–≤–æ–≥–æ –≤—ã–±–æ—Ä–∞ –∫–Ω–æ–ø–æ–∫"""
    dict_mongo["–í –∫–∞–∫–æ–µ –≤—Ä–µ–º—è —Å—É—Ç–æ–∫ –±–µ—Å–ø–æ–∫–æ—è—Ç –∫–æ–ª–∏–∫–∏?"] = "–í–µ—á–µ—Ä"
    query = update.callback_query
    await query.answer()
    keyboard = [
        [
            InlineKeyboardButton("–î–∞", callback_data=str(C_Q_5_1))
        ],
        [
            InlineKeyboardButton("–ù–µ—Ç", callback_data=str(C_Q_5_2))
        ],
        [
            InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=str(dict_metod[dict_query[num]]))
        ],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        text="–ï—Å—Ç—å –ª–∏ —Å–≤—è–∑—å –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è –∫–æ–ª–∏–∫ —Å –ø—Ä–∏–µ–º–æ–º –ø–∏—â–∏?", reply_markup=reply_markup
    )
    return FIRST


async def colic_q_4_4(update, _):
    num = question_number(update.callback_query.data)
    num = int(num)
    """–ü–æ–∫–∞–∑ –Ω–æ–≤–æ–≥–æ –≤—ã–±–æ—Ä–∞ –∫–Ω–æ–ø–æ–∫"""
    dict_mongo["–í –∫–∞–∫–æ–µ –≤—Ä–µ–º—è —Å—É—Ç–æ–∫ –±–µ—Å–ø–æ–∫–æ—è—Ç –∫–æ–ª–∏–∫–∏?"] = "–ù–æ—á—å"
    query = update.callback_query
    await query.answer()
    keyboard = [
        [
            InlineKeyboardButton("–î–∞", callback_data=str(C_Q_5_1))
        ],
        [
            InlineKeyboardButton("–ù–µ—Ç", callback_data=str(C_Q_5_2))
        ],
        [
            InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=str(dict_metod[dict_query[num]]))
        ],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        text="–ï—Å—Ç—å –ª–∏ —Å–≤—è–∑—å –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è –∫–æ–ª–∏–∫ —Å –ø—Ä–∏–µ–º–æ–º –ø–∏—â–∏?", reply_markup=reply_markup
    )
    return FIRST


async def colic_q_5_1(update, _):
    num = question_number(update.callback_query.data)
    num = int(num)
    """–ü–æ–∫–∞–∑ –Ω–æ–≤–æ–≥–æ –≤—ã–±–æ—Ä–∞ –∫–Ω–æ–ø–æ–∫"""
    dict_mongo["–ï—Å—Ç—å –ª–∏ —Å–≤—è–∑—å –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è –∫–æ–ª–∏–∫ —Å –ø—Ä–∏–µ–º–æ–º –ø–∏—â–∏?"] = "–î–∞"
    query = update.callback_query
    await query.answer()
    keyboard = [
        [
            InlineKeyboardButton("–î–∞", callback_data=str(C_Q_6_1))
        ],
        [
            InlineKeyboardButton("–ù–µ—Ç", callback_data=str(C_Q_6_2))
        ],
        [
            InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=str(dict_metod[dict_query[num]]))
        ],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        text="–ü—Ä–æ—Ö–æ–¥—è—Ç –ª–∏ –∫–æ–ª–∏–∫–∏ –ø–æ—Å–ª–µ —Å—Ç—É–ª–∞?", reply_markup=reply_markup
    )
    return FIRST


async def colic_q_5_2(update, _):
    num = question_number(update.callback_query.data)
    num = int(num)
    """–ü–æ–∫–∞–∑ –Ω–æ–≤–æ–≥–æ –≤—ã–±–æ—Ä–∞ –∫–Ω–æ–ø–æ–∫"""
    dict_mongo["–ï—Å—Ç—å –ª–∏ —Å–≤—è–∑—å –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è –∫–æ–ª–∏–∫ —Å –ø—Ä–∏–µ–º–æ–º –ø–∏—â–∏?"] = "–ù–µ—Ç"
    query = update.callback_query
    await query.answer()
    keyboard = [
        [
            InlineKeyboardButton("–î–∞", callback_data=str(C_Q_6_1))
        ],
        [
            InlineKeyboardButton("–ù–µ—Ç", callback_data=str(C_Q_6_2))
        ],
        [
            InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=str(dict_metod[dict_query[num]]))
        ],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        text="–ü—Ä–æ—Ö–æ–¥—è—Ç –ª–∏ –∫–æ–ª–∏–∫–∏ –ø–æ—Å–ª–µ —Å—Ç—É–ª–∞?", reply_markup=reply_markup
    )
    return FIRST


async def colic_q_6_1(update, _):
    num = question_number(update.callback_query.data)
    num = int(num)
    """–ü–æ–∫–∞–∑ –Ω–æ–≤–æ–≥–æ –≤—ã–±–æ—Ä–∞ –∫–Ω–æ–ø–æ–∫"""
    dict_mongo["–ü—Ä–æ—Ö–æ–¥—è—Ç –ª–∏ –∫–æ–ª–∏–∫–∏ –ø–æ—Å–ª–µ —Å—Ç—É–ª–∞?"] = "–î–∞"
    query = update.callback_query
    await query.answer()
    keyboard = [
        [
            InlineKeyboardButton("–ë–æ–ª–µ–µ 3-—Ö —á–∞—Å–æ–≤ –≤ –¥–µ–Ω—å", callback_data=str(C_Q_7_1))
        ],
        [
            InlineKeyboardButton("–ú–µ–Ω–µ–µ 3-—Ö —á–∞—Å–æ–≤ –≤ –¥–µ–Ω—å", callback_data=str(C_Q_7_2))
        ],
        [
            InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=str(dict_metod[dict_query[num]]))
        ],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        text="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–¥–Ω–æ–≥–æ —ç–ø–∏–∑–æ–¥–∞ –∫–æ–ª–∏–∫?", reply_markup=reply_markup
    )
    return FIRST


async def colic_q_6_2(update, _):
    num = question_number(update.callback_query.data)
    num = int(num)
    """–ü–æ–∫–∞–∑ –Ω–æ–≤–æ–≥–æ –≤—ã–±–æ—Ä–∞ –∫–Ω–æ–ø–æ–∫"""
    dict_mongo["–ü—Ä–æ—Ö–æ–¥—è—Ç –ª–∏ –∫–æ–ª–∏–∫–∏ –ø–æ—Å–ª–µ —Å—Ç—É–ª–∞?"] = "–ù–µ—Ç"
    query = update.callback_query
    await query.answer()
    keyboard = [
        [
            InlineKeyboardButton("–ë–æ–ª–µ–µ 3-—Ö —á–∞—Å–æ–≤ –≤ –¥–µ–Ω—å", callback_data=str(C_Q_7_1))
        ],
        [
            InlineKeyboardButton("–ú–µ–Ω–µ–µ 3-—Ö —á–∞—Å–æ–≤ –≤ –¥–µ–Ω—å", callback_data=str(C_Q_7_2))
        ],
        [
            InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=str(dict_metod[dict_query[num]]))
        ],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        text="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–¥–Ω–æ–≥–æ —ç–ø–∏–∑–æ–¥–∞ –∫–æ–ª–∏–∫?", reply_markup=reply_markup
    )
    return FIRST


async def colic_q_7_1(update, _):
    num = question_number(update.callback_query.data)
    num = int(num)
    """–ü–æ–∫–∞–∑ –Ω–æ–≤–æ–≥–æ –≤—ã–±–æ—Ä–∞ –∫–Ω–æ–ø–æ–∫"""
    dict_mongo["–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–¥–Ω–æ–≥–æ —ç–ø–∏–∑–æ–¥–∞ –∫–æ–ª–∏–∫?"] = "–ë–æ–ª–µ–µ 3-—Ö —á–∞—Å–æ–≤ –≤ –¥–µ–Ω—å"
    query = update.callback_query
    await query.answer()
    keyboard = [
        [
            InlineKeyboardButton("–ù–∞ –≥—Ä—É–¥–Ω–æ–º", callback_data=str(C_Q_8_1))
        ],
        [
            InlineKeyboardButton("–ù–∞ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–º –∏–ª–∏ —Å–º–µ—à–∞–Ω–Ω–æ–º", callback_data=str(C_Q_8_2))
        ],
        [
            InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=str(dict_metod[dict_query[num]]))
        ],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        text="–ù–∞ –∫–∞–∫–æ–º –≤—Å–∫–∞—Ä–º–ª–∏–≤–∞–Ω–∏–∏ –í–∞—à —Ä–µ–±–µ–Ω–æ–∫?", reply_markup=reply_markup
    )
    return FIRST


async def colic_q_7_2(update, _):
    num = question_number(update.callback_query.data)
    num = int(num)
    """–ü–æ–∫–∞–∑ –Ω–æ–≤–æ–≥–æ –≤—ã–±–æ—Ä–∞ –∫–Ω–æ–ø–æ–∫"""
    dict_mongo["–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–¥–Ω–æ–≥–æ —ç–ø–∏–∑–æ–¥–∞ –∫–æ–ª–∏–∫?"] = "–ú–µ–Ω–µ–µ 3-—Ö —á–∞—Å–æ–≤ –≤ –¥–µ–Ω—å"
    query = update.callback_query
    await query.answer()
    keyboard = [
        [
            InlineKeyboardButton("–ù–∞ –≥—Ä—É–¥–Ω–æ–º", callback_data=str(C_Q_8_1))
        ],
        [
            InlineKeyboardButton("–ù–∞ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–º –∏–ª–∏ —Å–º–µ—à–∞–Ω–Ω–æ–º", callback_data=str(C_Q_8_2))
        ],
        [
            InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=str(dict_metod[dict_query[num]]))
        ],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        text="–ù–∞ –∫–∞–∫–æ–º –≤—Å–∫–∞—Ä–º–ª–∏–≤–∞–Ω–∏–∏ –í–∞—à —Ä–µ–±–µ–Ω–æ–∫?", reply_markup=reply_markup
    )
    return FIRST


async def colic_q_8_1(update, _):
    num = question_number(update.callback_query.data)
    num = int(num)
    """–ü–æ–∫–∞–∑ –Ω–æ–≤–æ–≥–æ –≤—ã–±–æ—Ä–∞ –∫–Ω–æ–ø–æ–∫"""
    dict_mongo["–ù–∞ –∫–∞–∫–æ–º –≤—Å–∫–∞—Ä–º–ª–∏–≤–∞–Ω–∏–∏ –í–∞—à —Ä–µ–±–µ–Ω–æ–∫?"] = "–ù–∞ –≥—Ä—É–¥–Ω–æ–º"
    query = update.callback_query
    await query.answer()
    keyboard = [
        [
            InlineKeyboardButton("–î–∞", callback_data=str(C_E_1))
        ],
        [
            InlineKeyboardButton("–ù–µ—Ç", callback_data=str(C_E_2))
        ],
        [
            InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=str(dict_metod[dict_query[num]]))
        ],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        text="–ï—Å—Ç—å –ª–∏ —É –í–∞—à–µ–≥–æ —Ä–µ–±–µ–Ω–∫–∞ –æ–¥–Ω–∞ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–∑ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω—ã—Ö –∂–∞–ª–æ–±-\n"
             "–£–ø–æ—Ä–Ω—ã–π –∫—Ä–∏–∫ —Å –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏; –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ —Ä–≤–æ—Ç—ã; —Ä–≤–æ—Ç–∞ —Å –∫—Ä–æ–≤—å—é; "
             "–∫—Ä–æ–≤—å –≤ —Å—Ç—É–ª–µ; –ø–æ—Ç–µ—Ä—è –º–∞—Å—Å—ã —Ç–µ–ª–∞; –∑–∞–¥–µ—Ä–∂–∫–∞ —Ä–æ—Å—Ç–∞; –ª–∏—Ö–æ—Ä–∞–¥–∫–∞ (–ø–æ–≤—ã—à–µ–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã)? ",
        reply_markup=reply_markup
    )
    return FIRST


async def colic_q_8_2(update, _):
    num = question_number(update.callback_query.data)
    num = int(num)
    """–ü–æ–∫–∞–∑ –Ω–æ–≤–æ–≥–æ –≤—ã–±–æ—Ä–∞ –∫–Ω–æ–ø–æ–∫"""
    dict_mongo["–ù–∞ –∫–∞–∫–æ–º –≤—Å–∫–∞—Ä–º–ª–∏–≤–∞–Ω–∏–∏ –í–∞—à —Ä–µ–±–µ–Ω–æ–∫?"] = "–ù–∞ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–º –∏–ª–∏ —Å–º–µ—à–∞–Ω–Ω–æ–º"
    query = update.callback_query
    await query.answer()
    keyboard = [
        [
            InlineKeyboardButton("–î–∞", callback_data=str(C_E_1))
        ],
        [
            InlineKeyboardButton("–ù–µ—Ç", callback_data=str(C_E_3))
        ],
        [
            InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=str(dict_metod[dict_query[num]]))
        ],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        text="–ï—Å—Ç—å –ª–∏ —É –í–∞—à–µ–≥–æ —Ä–µ–±–µ–Ω–∫–∞ –æ–¥–Ω–∞ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–∑ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω—ã—Ö –∂–∞–ª–æ–±-\n"
             "–£–ø–æ—Ä–Ω—ã–π –∫—Ä–∏–∫ —Å –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏; –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ —Ä–≤–æ—Ç—ã; —Ä–≤–æ—Ç–∞ —Å –∫—Ä–æ–≤—å—é; "
             "–∫—Ä–æ–≤—å –≤ —Å—Ç—É–ª–µ; –ø–æ—Ç–µ—Ä—è –º–∞—Å—Å—ã —Ç–µ–ª–∞; –∑–∞–¥–µ—Ä–∂–∫–∞ —Ä–æ—Å—Ç–∞; –ª–∏—Ö–æ—Ä–∞–¥–∫–∞ (–ø–æ–≤—ã—à–µ–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã)? ",
        reply_markup=reply_markup
    )
    return FIRST


async def colic_end_1(update, _):
    dict_mongo[
        "–ï—Å—Ç—å –ª–∏ —É –í–∞—à–µ–≥–æ —Ä–µ–±–µ–Ω–∫–∞ –æ–¥–Ω–∞ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–∑ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω—ã—Ö –∂–∞–ª–æ–±- –£–ø–æ—Ä–Ω—ã–π –∫—Ä–∏–∫ —Å –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏; –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ —Ä–≤–æ—Ç—ã; —Ä–≤–æ—Ç–∞ —Å –∫—Ä–æ–≤—å—é; –∫—Ä–æ–≤—å –≤ —Å—Ç—É–ª–µ; –ø–æ—Ç–µ—Ä—è –º–∞—Å—Å—ã —Ç–µ–ª–∞; –∑–∞–¥–µ—Ä–∂–∫–∞ —Ä–æ—Å—Ç–∞; –ª–∏—Ö–æ—Ä–∞–¥–∫–∞ (–ø–æ–≤—ã—à–µ–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã)?"] = "–î–∞"
    query = update.callback_query
    await query.answer()
    global recommendations
    recommendations += "<b>–°—Ä–æ—á–Ω–æ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –≤—Ä–∞—á—É-–ø–µ–¥–∏–∞—Ç—Ä—É</b>"
    keyboard = [
        [
            InlineKeyboardButton("–í–∞—à–µ–≥–æ —Ä–µ–±–µ–Ω–∫–∞ –±–µ—Å–ø–æ–∫–æ–∏—Ç —á—Ç–æ-—Ç–æ –µ—â–µ?", callback_data=str(START_OVER))
        ],
        [
            InlineKeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –≤—Ä–∞—á—É –ø–µ–¥–∏–∞—Ç—Ä—É", callback_data=str(END))
        ],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        text="<b>–°—Ä–æ—á–Ω–æ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –≤—Ä–∞—á—É-–ø–µ–¥–∏–∞—Ç—Ä—É</b>",
        parse_mode='HTML',
        reply_markup=reply_markup
    )
    return SECOND


async def colic_end_2(update, _):
    dict_mongo[
        "–ï—Å—Ç—å –ª–∏ —É –í–∞—à–µ–≥–æ —Ä–µ–±–µ–Ω–∫–∞ –æ–¥–Ω–∞ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–∑ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω—ã—Ö –∂–∞–ª–æ–±- –£–ø–æ—Ä–Ω—ã–π –∫—Ä–∏–∫ —Å –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏; –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ —Ä–≤–æ—Ç—ã; —Ä–≤–æ—Ç–∞ —Å –∫—Ä–æ–≤—å—é; –∫—Ä–æ–≤—å –≤ —Å—Ç—É–ª–µ; –ø–æ—Ç–µ—Ä—è –º–∞—Å—Å—ã —Ç–µ–ª–∞; –∑–∞–¥–µ—Ä–∂–∫–∞ —Ä–æ—Å—Ç–∞; –ª–∏—Ö–æ—Ä–∞–¥–∫–∞ (–ø–æ–≤—ã—à–µ–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã)?"] = "–ù–µ—Ç"
    query = update.callback_query
    await query.answer()
    global recommendations
    recommendations += "\n<b>–û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –≤—Ä–∞—á—É-–ø–µ–¥–∏–∞—Ç—Ä—É</b>\n" \
                       "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∫–æ—Ä–º—è—â–µ–π –º–∞–º–µ –∏—Å–∫–ª—é—á–∏—Ç—å –∏–∑ –ø–∏—Ç–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç—ã, " \
                       "–ø–æ–≤—ã—à–∞—é—â–∏–µ –≥–∞–∑–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ –∫–∏—à–µ—á–Ω–∏–∫–µ:\n" \
                       "—Å–∞—Ö–∞—Ä, –∫–æ–Ω–¥–∏—Ç–µ—Ä—Å–∫–∏–µ –∏–∑–¥–µ–ª–∏—è, –≤–∏–Ω–æ–≥—Ä–∞–¥, –º—è—Å–Ω—ã–µ " \
                       "–±—É–ª—å–æ–Ω—ã, –∫–æ–Ω—Å–µ—Ä–≤—ã, –∫–æ–ª–±–∞—Å—ã, —Ü–µ–ª—å–Ω–æ–µ –º–æ–ª–æ–∫–æ –∑–∞–º–µ–Ω–∏—Ç—å " \
                       "–Ω–∞ –∫–∏—Å–ª–æ–º–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã;\n" \
                       "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Ä–µ–±–µ–Ω–∫—É:\n" \
                       "—Å—É—Ö–æ–µ —Ç–µ–ø–ª–æ –Ω–∞ –∂–∏–≤–æ—Ç (—Ç–µ–ø–ª–∞—è –ø–µ–ª–µ–Ω–∫–∞ –∏–ª–∏ –≥—Ä–µ–ª–∫–∞), " \
                       "–ø–æ–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ –∂–∏–≤–æ—Ç–∞ –ø–æ —á–∞—Å–æ–≤–æ–π —Å—Ç—Ä–µ–ª–∫–µ –∏ –≤—ã–∫–ª–∞–¥—ã–≤–∞–Ω–∏–µ –Ω–∞ –∂–∏–≤–æ—Ç –ø–µ—Ä–µ–¥ –∫–æ—Ä–º–ª–µ–Ω–∏–µ–º.\n"
    keyboard = [
        [
            InlineKeyboardButton("–í–∞—à–µ–≥–æ —Ä–µ–±–µ–Ω–∫–∞ –±–µ—Å–ø–æ–∫–æ–∏—Ç —á—Ç–æ-—Ç–æ –µ—â–µ?", callback_data=str(START_OVER))
        ],
        [
            InlineKeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –≤—Ä–∞—á—É –ø–µ–¥–∏–∞—Ç—Ä—É", callback_data=str(END))
        ],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        text="<b>–û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –≤—Ä–∞—á—É-–ø–µ–¥–∏–∞—Ç—Ä—É</b>\n"
             "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∫–æ—Ä–º—è—â–µ–π –º–∞–º–µ –∏—Å–∫–ª—é—á–∏—Ç—å –∏–∑ –ø–∏—Ç–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç—ã, –ø–æ–≤—ã—à–∞—é—â–∏–µ –≥–∞–∑–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ –∫–∏—à–µ—á–Ω–∏–∫–µ:\n"
             "—Å–∞—Ö–∞—Ä, –∫–æ–Ω–¥–∏—Ç–µ—Ä—Å–∫–∏–µ –∏–∑–¥–µ–ª–∏—è, –≤–∏–Ω–æ–≥—Ä–∞–¥, –º—è—Å–Ω—ã–µ –±—É–ª—å–æ–Ω—ã, –∫–æ–Ω—Å–µ—Ä–≤—ã, –∫–æ–ª–±–∞—Å—ã, —Ü–µ–ª—å–Ω–æ–µ –º–æ–ª–æ–∫–æ –∑–∞–º–µ–Ω–∏—Ç—å "
             "–Ω–∞ –∫–∏—Å–ª–æ–º–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã;\n"
             "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Ä–µ–±–µ–Ω–∫—É:\n"
             "—Å—É—Ö–æ–µ —Ç–µ–ø–ª–æ –Ω–∞ –∂–∏–≤–æ—Ç (—Ç–µ–ø–ª–∞—è –ø–µ–ª–µ–Ω–∫–∞ –∏–ª–∏ –≥—Ä–µ–ª–∫–∞), "
             "–ø–æ–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ –∂–∏–≤–æ—Ç–∞ –ø–æ —á–∞—Å–æ–≤–æ–π —Å—Ç—Ä–µ–ª–∫–µ –∏ –≤—ã–∫–ª–∞–¥—ã–≤–∞–Ω–∏–µ –Ω–∞ –∂–∏–≤–æ—Ç –ø–µ—Ä–µ–¥ –∫–æ—Ä–º–ª–µ–Ω–∏–µ–º.",
        parse_mode='HTML',
        reply_markup=reply_markup
    )
    return SECOND


async def colic_end_3(update, _):
    dict_mongo[
        "–ï—Å—Ç—å –ª–∏ —É –í–∞—à–µ–≥–æ —Ä–µ–±–µ–Ω–∫–∞ –æ–¥–Ω–∞ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–∑ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω—ã—Ö –∂–∞–ª–æ–±- –£–ø–æ—Ä–Ω—ã–π –∫—Ä–∏–∫ —Å –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏; –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ —Ä–≤–æ—Ç—ã; —Ä–≤–æ—Ç–∞ —Å –∫—Ä–æ–≤—å—é; –∫—Ä–æ–≤—å –≤ —Å—Ç—É–ª–µ; –ø–æ—Ç–µ—Ä—è –º–∞—Å—Å—ã —Ç–µ–ª–∞; –∑–∞–¥–µ—Ä–∂–∫–∞ —Ä–æ—Å—Ç–∞; –ª–∏—Ö–æ—Ä–∞–¥–∫–∞ (–ø–æ–≤—ã—à–µ–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã)?"] = "–ù–µ—Ç"
    query = update.callback_query
    await query.answer()
    global recommendations
    recommendations += "\n<b>–û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –≤—Ä–∞—á—É-–ø–µ–¥–∏–∞—Ç—Ä—É</b> –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏ —Ä–µ–∂–∏–º–∞ –ø–∏—Ç–∞–Ω–∏—è —Å–º–µ—Å–∏;\n" \
                       "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Ä–µ–±–µ–Ω–∫—É:\n" \
                       "—Å—É—Ö–æ–µ —Ç–µ–ø–ª–æ –Ω–∞ –∂–∏–≤–æ—Ç (—Ç–µ–ø–ª–∞—è –ø–µ–ª–µ–Ω–∫–∞ –∏–ª–∏ –≥—Ä–µ–ª–∫–∞), –ø–æ–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ –∂–∏–≤–æ—Ç–∞ –ø–æ —á–∞—Å–æ–≤–æ–π " \
                       "—Å—Ç—Ä–µ–ª–∫–µ –∏ –≤—ã–∫–ª–∞–¥—ã–≤–∞–Ω–∏–µ –Ω–∞ –∂–∏–≤–æ—Ç –ø–µ—Ä–µ–¥ –∫–æ—Ä–º–ª–µ–Ω–∏–µ–º.\n"
    keyboard = [
        [
            InlineKeyboardButton("–í–∞—à–µ–≥–æ —Ä–µ–±–µ–Ω–∫–∞ –±–µ—Å–ø–æ–∫–æ–∏—Ç —á—Ç–æ-—Ç–æ –µ—â–µ?", callback_data=str(START_OVER))
        ],
        [
            InlineKeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –≤—Ä–∞—á—É –ø–µ–¥–∏–∞—Ç—Ä—É", callback_data=str(END))
        ],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        text="<b>–û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –≤—Ä–∞—á—É-–ø–µ–¥–∏–∞—Ç—Ä—É</b> –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏ —Ä–µ–∂–∏–º–∞ –ø–∏—Ç–∞–Ω–∏—è —Å–º–µ—Å–∏;\n"
             "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Ä–µ–±–µ–Ω–∫—É:\n"
             "—Å—É—Ö–æ–µ —Ç–µ–ø–ª–æ –Ω–∞ –∂–∏–≤–æ—Ç (—Ç–µ–ø–ª–∞—è –ø–µ–ª–µ–Ω–∫–∞ –∏–ª–∏ –≥—Ä–µ–ª–∫–∞), –ø–æ–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ –∂–∏–≤–æ—Ç–∞ –ø–æ —á–∞—Å–æ–≤–æ–π "
             "—Å—Ç—Ä–µ–ª–∫–µ –∏ –≤—ã–∫–ª–∞–¥—ã–≤–∞–Ω–∏–µ –Ω–∞ –∂–∏–≤–æ—Ç –ø–µ—Ä–µ–¥ –∫–æ—Ä–º–ª–µ–Ω–∏–µ–º.",
        parse_mode='HTML',
        reply_markup=reply_markup

    )
    return SECOND


async def stool_q_1(update, _):
    """–ü–æ–∫–∞–∑ –≤—ã–±–æ—Ä–∞ –∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    await query.answer()
    keyboard = [
        [
            InlineKeyboardButton("–ë–æ–ª—å—à–µ 3-—Ö —Ä–∞–∑ –≤ –¥–µ–Ω—å", callback_data=str(S_Q_2_1))
        ],
        [
            InlineKeyboardButton("2-3 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å", callback_data=str(S_Q_2_2))
        ],
        [
            InlineKeyboardButton("1 —Ä–∞–∑ –≤ –¥–µ–Ω—å", callback_data=str(S_Q_2_3))
        ],
        [
            InlineKeyboardButton("2 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é –∏ —Ä–µ–∂–µ", callback_data=str(S_Q_2_4))
        ],
        [
            InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=str(START_OVER))
        ],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        text="–ó–∞ –ø—Ä–æ—à–µ–¥—à–∏–π –º–µ—Å—è—Ü –≤ —Å—Ä–µ–¥–Ω–µ–º —Å–∫–æ–ª—å–∫–æ –¥–µ—Ñ–µ–∫–∞—Ü–∏–π –≤ –Ω–µ–¥–µ–ª—é –±—ã–ª–æ —É –í–∞—à–µ–≥–æ —Ä–µ–±–µ–Ω–∫–∞?", reply_markup=reply_markup
    )
    return FIRST


async def stool_q_2_1(update, _):
    """–ü–æ–∫–∞–∑ –≤—ã–±–æ—Ä–∞ –∫–Ω–æ–ø–æ–∫"""
    dict_mongo[
        "–ó–∞ –ø—Ä–æ—à–µ–¥—à–∏–π –º–µ—Å—è—Ü –≤ —Å—Ä–µ–¥–Ω–µ–º —Å–∫–æ–ª—å–∫–æ –¥–µ—Ñ–µ–∫–∞—Ü–∏–π –≤ –Ω–µ–¥–µ–ª—é –±—ã–ª–æ —É –í–∞—à–µ–≥–æ —Ä–µ–±–µ–Ω–∫–∞?"] = "–ë–æ–ª—å—à–µ 3-—Ö —Ä–∞–∑ –≤ –¥–µ–Ω—å"
    query = update.callback_query
    await query.answer()
    keyboard = [
        [
            InlineKeyboardButton("–î–∞", callback_data=str(S_Q_3_1))
        ],
        [
            InlineKeyboardButton("–ù–µ—Ç", callback_data=str(S_Q_3_2))
        ],
        [
            InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=str(S_Q_1))
        ],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        text="–ï—Å—Ç—å –ª–∏ —É –í–∞—à–µ–≥–æ —Ä–µ–±–µ–Ω–∫–∞ –æ–¥–Ω–∞ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–∑ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω—ã—Ö –∂–∞–ª–æ–±- —Å—É—Ö–æ—Å—Ç—å "
             "–∫–æ–∂–∏ –∏ —Å–ª–∏–∑–∏—Å—Ç—ã—Ö; —Ä–µ–¥–∫–æ–µ –º–æ—á–µ–∏—Å–ø—É—Å–∫–∞–Ω–∏–µ; —è–∑—ã–∫ –æ–±–ª–æ–∂–µ–Ω –±–µ–ª—ã–º –Ω–∞–ª–µ—Ç–æ–º; —Å–ª–∞–±–æ—Å—Ç—å "
             "–∏ —Å–æ–Ω–ª–∏–≤–æ—Å—Ç—å; –∑–∞–ø–∞–¥–µ–Ω–∏–µ —Ä–æ–¥–Ω–∏—á–∫–∞?",
        reply_markup=reply_markup
    )
    # –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ `SECOND`
    return FIRST


async def stool_q_2_2(update, _):
    """–ü–æ–∫–∞–∑ –≤—ã–±–æ—Ä–∞ –∫–Ω–æ–ø–æ–∫"""
    dict_mongo[
        "–ó–∞ –ø—Ä–æ—à–µ–¥—à–∏–π –º–µ—Å—è—Ü –≤ —Å—Ä–µ–¥–Ω–µ–º —Å–∫–æ–ª—å–∫–æ –¥–µ—Ñ–µ–∫–∞—Ü–∏–π –≤ –Ω–µ–¥–µ–ª—é –±—ã–ª–æ —É –í–∞—à–µ–≥–æ —Ä–µ–±–µ–Ω–∫–∞?"] = "2-3 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å"
    query = update.callback_query
    await query.answer()
    keyboard = [
        [
            InlineKeyboardButton("–î–∞", callback_data=str(S_Q_3_1))
        ],
        [
            InlineKeyboardButton("–ù–µ—Ç", callback_data=str(S_Q_3_2))
        ],
        [
            InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=str(S_Q_1))
        ],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        text="–ï—Å—Ç—å –ª–∏ —É –í–∞—à–µ–≥–æ —Ä–µ–±–µ–Ω–∫–∞ –æ–¥–Ω–∞ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–∑ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω—ã—Ö –∂–∞–ª–æ–±- —Å—É—Ö–æ—Å—Ç—å "
             "–∫–æ–∂–∏ –∏ —Å–ª–∏–∑–∏—Å—Ç—ã—Ö; —Ä–µ–¥–∫–æ–µ –º–æ—á–µ–∏—Å–ø—É—Å–∫–∞–Ω–∏–µ; —è–∑—ã–∫ –æ–±–ª–æ–∂–µ–Ω –±–µ–ª—ã–º –Ω–∞–ª–µ—Ç–æ–º; —Å–ª–∞–±–æ—Å—Ç—å "
             "–∏ —Å–æ–Ω–ª–∏–≤–æ—Å—Ç—å; –∑–∞–ø–∞–¥–µ–Ω–∏–µ —Ä–æ–¥–Ω–∏—á–∫–∞?",
        reply_markup=reply_markup
    )
    # –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ `SECOND`
    return FIRST


async def stool_q_2_3(update, _):
    """–ü–æ–∫–∞–∑ –≤—ã–±–æ—Ä–∞ –∫–Ω–æ–ø–æ–∫"""
    dict_mongo[
        "–ó–∞ –ø—Ä–æ—à–µ–¥—à–∏–π –º–µ—Å—è—Ü –≤ —Å—Ä–µ–¥–Ω–µ–º —Å–∫–æ–ª—å–∫–æ –¥–µ—Ñ–µ–∫–∞—Ü–∏–π –≤ –Ω–µ–¥–µ–ª—é –±—ã–ª–æ —É –í–∞—à–µ–≥–æ —Ä–µ–±–µ–Ω–∫–∞?"] = "1 —Ä–∞–∑ –≤ –¥–µ–Ω—å"
    query = update.callback_query
    await query.answer()
    keyboard = [
        [
            InlineKeyboardButton("–î–∞", callback_data=str(S_Q_3_1))
        ],
        [
            InlineKeyboardButton("–ù–µ—Ç", callback_data=str(S_Q_3_2))
        ],
        [
            InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=str(S_Q_1))
        ],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        text="–ï—Å—Ç—å –ª–∏ —É –í–∞—à–µ–≥–æ —Ä–µ–±–µ–Ω–∫–∞ –æ–¥–Ω–∞ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–∑ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω—ã—Ö –∂–∞–ª–æ–±- —Å—É—Ö–æ—Å—Ç—å "
             "–∫–æ–∂–∏ –∏ —Å–ª–∏–∑–∏—Å—Ç—ã—Ö; —Ä–µ–¥–∫–æ–µ –º–æ—á–µ–∏—Å–ø—É—Å–∫–∞–Ω–∏–µ; —è–∑—ã–∫ –æ–±–ª–æ–∂–µ–Ω –±–µ–ª—ã–º –Ω–∞–ª–µ—Ç–æ–º; —Å–ª–∞–±–æ—Å—Ç—å "
             "–∏ —Å–æ–Ω–ª–∏–≤–æ—Å—Ç—å; –∑–∞–ø–∞–¥–µ–Ω–∏–µ —Ä–æ–¥–Ω–∏—á–∫–∞?",
        reply_markup=reply_markup
    )
    # –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ `SECOND`
    return FIRST


async def stool_q_2_4(update, _):
    """–ü–æ–∫–∞–∑ –≤—ã–±–æ—Ä–∞ –∫–Ω–æ–ø–æ–∫"""
    dict_mongo[
        "–ó–∞ –ø—Ä–æ—à–µ–¥—à–∏–π –º–µ—Å—è—Ü –≤ —Å—Ä–µ–¥–Ω–µ–º —Å–∫–æ–ª—å–∫–æ –¥–µ—Ñ–µ–∫–∞—Ü–∏–π –≤ –Ω–µ–¥–µ–ª—é –±—ã–ª–æ —É –í–∞—à–µ–≥–æ —Ä–µ–±–µ–Ω–∫–∞?"] = "2 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é –∏ —Ä–µ–∂–µ"
    query = update.callback_query
    await query.answer()
    keyboard = [
        [
            InlineKeyboardButton("–î–∞", callback_data=str(S_Q_3_1))
        ],
        [
            InlineKeyboardButton("–ù–µ—Ç", callback_data=str(S_Q_3_2))
        ],
        [
            InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=str(S_Q_1))
        ],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        text="–ï—Å—Ç—å –ª–∏ —É –í–∞—à–µ–≥–æ —Ä–µ–±–µ–Ω–∫–∞ –æ–¥–Ω–∞ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–∑ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω—ã—Ö –∂–∞–ª–æ–±- —Å—É—Ö–æ—Å—Ç—å "
             "–∫–æ–∂–∏ –∏ —Å–ª–∏–∑–∏—Å—Ç—ã—Ö; —Ä–µ–¥–∫–æ–µ –º–æ—á–µ–∏—Å–ø—É—Å–∫–∞–Ω–∏–µ; —è–∑—ã–∫ –æ–±–ª–æ–∂–µ–Ω –±–µ–ª—ã–º –Ω–∞–ª–µ—Ç–æ–º; —Å–ª–∞–±–æ—Å—Ç—å "
             "–∏ —Å–æ–Ω–ª–∏–≤–æ—Å—Ç—å; –∑–∞–ø–∞–¥–µ–Ω–∏–µ —Ä–æ–¥–Ω–∏—á–∫–∞?",
        reply_markup=reply_markup
    )
    # –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ `SECOND`
    return FIRST


async def stool_q_3_1(update, _):
    """–ü–æ–∫–∞–∑ –≤—ã–±–æ—Ä–∞ –∫–Ω–æ–ø–æ–∫"""
    dict_mongo[
        "–ï—Å—Ç—å –ª–∏ —É –í–∞—à–µ–≥–æ —Ä–µ–±–µ–Ω–∫–∞ –æ–¥–Ω–∞ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–∑ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω—ã—Ö –∂–∞–ª–æ–±- —Å—É—Ö–æ—Å—Ç—å –∫–æ–∂–∏ –∏ —Å–ª–∏–∑–∏—Å—Ç—ã—Ö; —Ä–µ–¥–∫–æ–µ –º–æ—á–µ–∏—Å–ø—É—Å–∫–∞–Ω–∏–µ; —è–∑—ã–∫ –æ–±–ª–æ–∂–µ–Ω –±–µ–ª—ã–º –Ω–∞–ª–µ—Ç–æ–º; —Å–ª–∞–±–æ—Å—Ç—å –∏ —Å–æ–Ω–ª–∏–≤–æ—Å—Ç—å; –∑–∞–ø–∞–¥–µ–Ω–∏–µ —Ä–æ–¥–Ω–∏—á–∫–∞?"] = "–î–∞"
    query = update.callback_query
    await query.answer()
    keyboard = [
        [
            InlineKeyboardButton("–ù–∞ –≥—Ä—É–¥–Ω–æ–º", callback_data=str(S_Q_4_1))
        ],
        [
            InlineKeyboardButton("–ù–∞ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–º –∏–ª–∏ —Å–º–µ—à–∞–Ω–Ω–æ–º", callback_data=str(S_Q_4_2))
        ],
        [
            InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=str(S_Q_2_1))
        ],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        text="–ù–∞ –∫–∞–∫–æ–º –≤—Å–∫–∞—Ä–º–ª–∏–≤–∞–Ω–∏–∏ –í–∞—à —Ä–µ–±–µ–Ω–æ–∫?",
        reply_markup=reply_markup
    )
    # –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ `SECOND`
    return FIRST


async def stool_q_3_2(update, _):
    """–ü–æ–∫–∞–∑ –≤—ã–±–æ—Ä–∞ –∫–Ω–æ–ø–æ–∫"""
    dict_mongo[
        "–ï—Å—Ç—å –ª–∏ —É –í–∞—à–µ–≥–æ —Ä–µ–±–µ–Ω–∫–∞ –æ–¥–Ω–∞ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–∑ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω—ã—Ö –∂–∞–ª–æ–±- —Å—É—Ö–æ—Å—Ç—å –∫–æ–∂–∏ –∏ —Å–ª–∏–∑–∏—Å—Ç—ã—Ö; —Ä–µ–¥–∫–æ–µ –º–æ—á–µ–∏—Å–ø—É—Å–∫–∞–Ω–∏–µ; —è–∑—ã–∫ –æ–±–ª–æ–∂–µ–Ω –±–µ–ª—ã–º –Ω–∞–ª–µ—Ç–æ–º; —Å–ª–∞–±–æ—Å—Ç—å –∏ —Å–æ–Ω–ª–∏–≤–æ—Å—Ç—å; –∑–∞–ø–∞–¥–µ–Ω–∏–µ —Ä–æ–¥–Ω–∏—á–∫–∞?"] = "–ù–µ—Ç"
    query = update.callback_query
    await query.answer()
    keyboard = [
        [
            InlineKeyboardButton("–ù–∞ –≥—Ä—É–¥–Ω–æ–º", callback_data=str(S_Q_4_3))
        ],
        [
            InlineKeyboardButton("–ù–∞ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–º –∏–ª–∏ —Å–º–µ—à–∞–Ω–Ω–æ–º", callback_data=str(S_Q_4_4))
        ],
        [
            InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=str(S_Q_2_1))
        ],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        text="–ù–∞ –∫–∞–∫–æ–º –≤—Å–∫–∞—Ä–º–ª–∏–≤–∞–Ω–∏–∏ –í–∞—à —Ä–µ–±–µ–Ω–æ–∫?",
        reply_markup=reply_markup
    )
    # –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ `SECOND`
    return FIRST


async def stool_q_4_1(update, _):
    """–ü–æ–∫–∞–∑ –≤—ã–±–æ—Ä–∞ –∫–Ω–æ–ø–æ–∫"""
    dict_mongo[
        "–ù–∞ –∫–∞–∫–æ–º –≤—Å–∫–∞—Ä–º–ª–∏–≤–∞–Ω–∏–∏ –í–∞—à —Ä–µ–±–µ–Ω–æ–∫?"] = "–ù–∞ –≥—Ä—É–¥–Ω–æ–º"
    query = update.callback_query
    await query.answer()
    keyboard = [
        [
            InlineKeyboardButton("–î–∞", callback_data=str(S_Q_5_1_1))
        ],
        [
            InlineKeyboardButton("–ù–µ—Ç", callback_data=str(S_Q_5_1_2))
        ],
        [
            InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=str(S_Q_3_1))
        ],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        text="–í —Ç–µ—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –º–µ—Å—è—Ü–∞ –í–∞—à —Ä–µ–±–µ–Ω–æ–∫ —Å–∏–ª—å–Ω–æ —Ç—É–∂–∏–ª—Å—è –≤–æ –≤—Ä–µ–º—è –¥–µ—Ñ–µ–∫–∞—Ü–∏–∏?",
        reply_markup=reply_markup
    )
    # –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ `SECOND`
    return FIRST


async def stool_q_4_2(update, _):
    """–ü–æ–∫–∞–∑ –≤—ã–±–æ—Ä–∞ –∫–Ω–æ–ø–æ–∫"""
    dict_mongo[
        "–ù–∞ –∫–∞–∫–æ–º –≤—Å–∫–∞—Ä–º–ª–∏–≤–∞–Ω–∏–∏ –í–∞—à —Ä–µ–±–µ–Ω–æ–∫?"] = "–ù–∞ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–º –∏–ª–∏ —Å–º–µ—à–∞–Ω–Ω–æ–º"
    query = update.callback_query
    await query.answer()
    keyboard = [
        [
            InlineKeyboardButton("–î–∞", callback_data=str(S_Q_5_2_1))
        ],
        [
            InlineKeyboardButton("–ù–µ—Ç", callback_data=str(S_Q_5_2_2))
        ],
        [
            InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=str(S_Q_3_1))
        ],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        text="–í —Ç–µ—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –º–µ—Å—è—Ü–∞ –í–∞—à —Ä–µ–±–µ–Ω–æ–∫ —Å–∏–ª—å–Ω–æ —Ç—É–∂–∏–ª—Å—è –≤–æ –≤—Ä–µ–º—è –¥–µ—Ñ–µ–∫–∞—Ü–∏–∏?",
        reply_markup=reply_markup
    )
    # –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ `SECOND`
    return FIRST


async def stool_q_4_3(update, _):
    """–ü–æ–∫–∞–∑ –≤—ã–±–æ—Ä–∞ –∫–Ω–æ–ø–æ–∫"""
    dict_mongo[
        "–ù–∞ –∫–∞–∫–æ–º –≤—Å–∫–∞—Ä–º–ª–∏–≤–∞–Ω–∏–∏ –í–∞—à —Ä–µ–±–µ–Ω–æ–∫?"] = "–ù–∞ –≥—Ä—É–¥–Ω–æ–º"
    query = update.callback_query
    await query.answer()
    keyboard = [
        [
            InlineKeyboardButton("–î–∞", callback_data=str(S_Q_5_3_1))
        ],
        [
            InlineKeyboardButton("–ù–µ—Ç", callback_data=str(S_Q_5_3_2))
        ],
        [
            InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=str(S_Q_3_2))
        ],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        text="–í —Ç–µ—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –º–µ—Å—è—Ü–∞ –í–∞—à —Ä–µ–±–µ–Ω–æ–∫ —Å–∏–ª—å–Ω–æ —Ç—É–∂–∏–ª—Å—è –≤–æ –≤—Ä–µ–º—è –¥–µ—Ñ–µ–∫–∞—Ü–∏–∏?",
        reply_markup=reply_markup
    )
    # –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ `SECOND`
    return FIRST


async def stool_q_4_4(update, _):
    """–ü–æ–∫–∞–∑ –≤—ã–±–æ—Ä–∞ –∫–Ω–æ–ø–æ–∫"""
    dict_mongo[
        "–ù–∞ –∫–∞–∫–æ–º –≤—Å–∫–∞—Ä–º–ª–∏–≤–∞–Ω–∏–∏ –í–∞—à —Ä–µ–±–µ–Ω–æ–∫?"] = "–ù–∞ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–º –∏–ª–∏ —Å–º–µ—à–∞–Ω–Ω–æ–º"
    query = update.callback_query
    await query.answer()
    keyboard = [
        [
            InlineKeyboardButton("–î–∞", callback_data=str(S_Q_5_4_1))
        ],
        [
            InlineKeyboardButton("–ù–µ—Ç", callback_data=str(S_Q_5_4_2))
        ],
        [
            InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=str(S_Q_3_2))
        ],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        text="–í —Ç–µ—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –º–µ—Å—è—Ü–∞ –í–∞—à —Ä–µ–±–µ–Ω–æ–∫ —Å–∏–ª—å–Ω–æ —Ç—É–∂–∏–ª—Å—è –≤–æ –≤—Ä–µ–º—è –¥–µ—Ñ–µ–∫–∞—Ü–∏–∏?",
        reply_markup=reply_markup
    )
    # –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ `SECOND`
    return FIRST


async def stool_q_5_1_1(update, _):
    """–ü–æ–∫–∞–∑ –≤—ã–±–æ—Ä–∞ –∫–Ω–æ–ø–æ–∫"""
    dict_mongo[
        "–í —Ç–µ—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –º–µ—Å—è—Ü–∞ –í–∞—à —Ä–µ–±–µ–Ω–æ–∫ —Å–∏–ª—å–Ω–æ —Ç—É–∂–∏–ª—Å—è –≤–æ –≤—Ä–µ–º—è –¥–µ—Ñ–µ–∫–∞—Ü–∏–∏?"] = "–î–∞"
    query = update.callback_query
    await query.answer()
    keyboard = [
        [
            InlineKeyboardButton("–ñ–∏–¥–∫–∏–π —Å—Ç—É–ª", callback_data=str(S_E_1_1))
        ],
        [
            InlineKeyboardButton("–õ–µ–Ω—Ç–æ–≤–∏–¥–Ω—ã–π —Å—Ç—É–ª", callback_data=str(S_E_1_2))
        ],
        [
            InlineKeyboardButton("–ö–∞—à–∏—Ü–µ–æ–±—Ä–∞–∑–Ω—ã–π —Å—Ç—É–ª", callback_data=str(S_E_2_1))
        ],
        [
            InlineKeyboardButton("–ü–ª–æ—Ç–Ω—ã–π —Å—Ç—É–ª", callback_data=str(S_E_2_2))
        ],
        [
            InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=str(S_Q_4_1))
        ],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        text="–ö–∞–∫–æ–π –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ü–∏–∏ –±—ã–ª —Å—Ç—É–ª —É –í–∞—à —Ä–µ–±–µ–Ω–æ–∫ –∑–∞ –ø—Ä–æ—à–µ–¥—à–∏–π –º–µ—Å—è—Ü?",
        reply_markup=reply_markup
    )
    return FIRST


async def stool_q_5_1_2(update, _):
    """–ü–æ–∫–∞–∑ –≤—ã–±–æ—Ä–∞ –∫–Ω–æ–ø–æ–∫"""
    dict_mongo[
        "–í —Ç–µ—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –º–µ—Å—è—Ü–∞ –í–∞—à —Ä–µ–±–µ–Ω–æ–∫ —Å–∏–ª—å–Ω–æ —Ç—É–∂–∏–ª—Å—è –≤–æ –≤—Ä–µ–º—è –¥–µ—Ñ–µ–∫–∞—Ü–∏–∏?"] = "–ù–µ—Ç"
    query = update.callback_query
    await query.answer()
    keyboard = [
        [
            InlineKeyboardButton("–ñ–∏–¥–∫–∏–π —Å—Ç—É–ª", callback_data=str(S_E_1_1))
        ],
        [
            InlineKeyboardButton("–õ–µ–Ω—Ç–æ–≤–∏–¥–Ω—ã–π —Å—Ç—É–ª", callback_data=str(S_E_1_2))
        ],
        [
            InlineKeyboardButton("–ö–∞—à–∏—Ü–µ–æ–±—Ä–∞–∑–Ω—ã–π —Å—Ç—É–ª", callback_data=str(S_E_2_1))
        ],
        [
            InlineKeyboardButton("–ü–ª–æ—Ç–Ω—ã–π —Å—Ç—É–ª", callback_data=str(S_E_2_2))
        ],
        [
            InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=str(S_Q_4_1))
        ],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        text="–ö–∞–∫–æ–π –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ü–∏–∏ –±—ã–ª —Å—Ç—É–ª —É –í–∞—à —Ä–µ–±–µ–Ω–æ–∫ –∑–∞ –ø—Ä–æ—à–µ–¥—à–∏–π –º–µ—Å—è—Ü?",
        reply_markup=reply_markup
    )
    return FIRST


async def stool_q_5_2_1(update, _):
    """–ü–æ–∫–∞–∑ –≤—ã–±–æ—Ä–∞ –∫–Ω–æ–ø–æ–∫"""
    dict_mongo[
        "–í —Ç–µ—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –º–µ—Å—è—Ü–∞ –í–∞—à —Ä–µ–±–µ–Ω–æ–∫ —Å–∏–ª—å–Ω–æ —Ç—É–∂–∏–ª—Å—è –≤–æ –≤—Ä–µ–º—è –¥–µ—Ñ–µ–∫–∞—Ü–∏–∏?"] = "–î–∞"
    query = update.callback_query
    await query.answer()
    keyboard = [
        [
            InlineKeyboardButton("–ñ–∏–¥–∫–∏–π —Å—Ç—É–ª", callback_data=str(S_E_1_1))
        ],
        [
            InlineKeyboardButton("–õ–µ–Ω—Ç–æ–≤–∏–¥–Ω—ã–π —Å—Ç—É–ª", callback_data=str(S_E_1_2))
        ],
        [
            InlineKeyboardButton("–ö–∞—à–∏—Ü–µ–æ–±—Ä–∞–∑–Ω—ã–π —Å—Ç—É–ª", callback_data=str(S_E_3_1))
        ],
        [
            InlineKeyboardButton("–ü–ª–æ—Ç–Ω—ã–π —Å—Ç—É–ª", callback_data=str(S_E_3_2))
        ],
        [
            InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=str(S_Q_4_2))
        ],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        text="–ö–∞–∫–æ–π –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ü–∏–∏ –±—ã–ª —Å—Ç—É–ª —É –í–∞—à —Ä–µ–±–µ–Ω–æ–∫ –∑–∞ –ø—Ä–æ—à–µ–¥—à–∏–π –º–µ—Å—è—Ü?",
        reply_markup=reply_markup
    )
    return FIRST


async def stool_q_5_2_2(update, _):
    """–ü–æ–∫–∞–∑ –≤—ã–±–æ—Ä–∞ –∫–Ω–æ–ø–æ–∫"""
    dict_mongo[
        "–í —Ç–µ—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –º–µ—Å—è—Ü–∞ –í–∞—à —Ä–µ–±–µ–Ω–æ–∫ —Å–∏–ª—å–Ω–æ —Ç—É–∂–∏–ª—Å—è –≤–æ –≤—Ä–µ–º—è –¥–µ—Ñ–µ–∫–∞—Ü–∏–∏?"] = "–ù–µ—Ç"
    query = update.callback_query
    await query.answer()
    keyboard = [
        [
            InlineKeyboardButton("–ñ–∏–¥–∫–∏–π —Å—Ç—É–ª", callback_data=str(S_E_1_1))
        ],
        [
            InlineKeyboardButton("–õ–µ–Ω—Ç–æ–≤–∏–¥–Ω—ã–π —Å—Ç—É–ª", callback_data=str(S_E_1_2))
        ],
        [
            InlineKeyboardButton("–ö–∞—à–∏—Ü–µ–æ–±—Ä–∞–∑–Ω—ã–π —Å—Ç—É–ª", callback_data=str(S_E_3_1))
        ],
        [
            InlineKeyboardButton("–ü–ª–æ—Ç–Ω—ã–π —Å—Ç—É–ª", callback_data=str(S_E_3_2))
        ],
        [
            InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=str(S_Q_4_2))
        ],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        text="–ö–∞–∫–æ–π –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ü–∏–∏ –±—ã–ª —Å—Ç—É–ª —É –í–∞—à —Ä–µ–±–µ–Ω–æ–∫ –∑–∞ –ø—Ä–æ—à–µ–¥—à–∏–π –º–µ—Å—è—Ü?",
        reply_markup=reply_markup
    )
    return FIRST


async def stool_q_5_3_1(update, _):
    """–ü–æ–∫–∞–∑ –≤—ã–±–æ—Ä–∞ –∫–Ω–æ–ø–æ–∫"""
    dict_mongo[
        "–í —Ç–µ—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –º–µ—Å—è—Ü–∞ –í–∞—à —Ä–µ–±–µ–Ω–æ–∫ —Å–∏–ª—å–Ω–æ —Ç—É–∂–∏–ª—Å—è –≤–æ –≤—Ä–µ–º—è –¥–µ—Ñ–µ–∫–∞—Ü–∏–∏?"] = "–î–∞"
    query = update.callback_query
    await query.answer()
    keyboard = [
        [
            InlineKeyboardButton("–ñ–∏–¥–∫–∏–π —Å—Ç—É–ª", callback_data=str(S_E_1_1))
        ],
        [
            InlineKeyboardButton("–õ–µ–Ω—Ç–æ–≤–∏–¥–Ω—ã–π —Å—Ç—É–ª", callback_data=str(S_E_1_2))
        ],
        [
            InlineKeyboardButton("–ö–∞—à–∏—Ü–µ–æ–±—Ä–∞–∑–Ω—ã–π —Å—Ç—É–ª", callback_data=str(S_E_2_1))
        ],
        [
            InlineKeyboardButton("–ü–ª–æ—Ç–Ω—ã–π —Å—Ç—É–ª", callback_data=str(S_E_2_2))
        ],
        [
            InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=str(S_Q_4_3))
        ],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        text="–ö–∞–∫–æ–π –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ü–∏–∏ –±—ã–ª —Å—Ç—É–ª —É –í–∞—à —Ä–µ–±–µ–Ω–æ–∫ –∑–∞ –ø—Ä–æ—à–µ–¥—à–∏–π –º–µ—Å—è—Ü?",
        reply_markup=reply_markup
    )
    return FIRST


async def stool_q_5_3_2(update, _):
    """–ü–æ–∫–∞–∑ –≤—ã–±–æ—Ä–∞ –∫–Ω–æ–ø–æ–∫"""
    dict_mongo[
        "–í —Ç–µ—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –º–µ—Å—è—Ü–∞ –í–∞—à —Ä–µ–±–µ–Ω–æ–∫ —Å–∏–ª—å–Ω–æ —Ç—É–∂–∏–ª—Å—è –≤–æ –≤—Ä–µ–º—è –¥–µ—Ñ–µ–∫–∞—Ü–∏–∏?"] = "–ù–µ—Ç"
    query = update.callback_query
    await query.answer()
    keyboard = [
        [
            InlineKeyboardButton("–ñ–∏–¥–∫–∏–π —Å—Ç—É–ª", callback_data=str(S_E_1_1))
        ],
        [
            InlineKeyboardButton("–õ–µ–Ω—Ç–æ–≤–∏–¥–Ω—ã–π —Å—Ç—É–ª", callback_data=str(S_E_1_2))
        ],
        [
            InlineKeyboardButton("–ö–∞—à–∏—Ü–µ–æ–±—Ä–∞–∑–Ω—ã–π —Å—Ç—É–ª", callback_data=str(S_E_2_1))
        ],
        [
            InlineKeyboardButton("–ü–ª–æ—Ç–Ω—ã–π —Å—Ç—É–ª", callback_data=str(S_E_2_2))
        ],
        [
            InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=str(S_Q_4_3))
        ],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        text="–ö–∞–∫–æ–π –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ü–∏–∏ –±—ã–ª —Å—Ç—É–ª —É –í–∞—à —Ä–µ–±–µ–Ω–æ–∫ –∑–∞ –ø—Ä–æ—à–µ–¥—à–∏–π –º–µ—Å—è—Ü?",
        reply_markup=reply_markup
    )
    return FIRST


async def stool_q_5_4_1(update, _):
    """–ü–æ–∫–∞–∑ –≤—ã–±–æ—Ä–∞ –∫–Ω–æ–ø–æ–∫"""
    dict_mongo[
        "–í —Ç–µ—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –º–µ—Å—è—Ü–∞ –í–∞—à —Ä–µ–±–µ–Ω–æ–∫ —Å–∏–ª—å–Ω–æ —Ç—É–∂–∏–ª—Å—è –≤–æ –≤—Ä–µ–º—è –¥–µ—Ñ–µ–∫–∞—Ü–∏–∏?"] = "–î–∞"
    query = update.callback_query
    await query.answer()
    keyboard = [
        [
            InlineKeyboardButton("–ñ–∏–¥–∫–∏–π —Å—Ç—É–ª", callback_data=str(S_E_1_1))
        ],
        [
            InlineKeyboardButton("–õ–µ–Ω—Ç–æ–≤–∏–¥–Ω—ã–π —Å—Ç—É–ª", callback_data=str(S_E_1_2))
        ],
        [
            InlineKeyboardButton("–ö–∞—à–∏—Ü–µ–æ–±—Ä–∞–∑–Ω—ã–π —Å—Ç—É–ª", callback_data=str(S_E_3_1))
        ],
        [
            InlineKeyboardButton("–ü–ª–æ—Ç–Ω—ã–π —Å—Ç—É–ª", callback_data=str(S_E_3_2))
        ],
        [
            InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=str(S_Q_4_4))
        ],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        text="–ö–∞–∫–æ–π –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ü–∏–∏ –±—ã–ª —Å—Ç—É–ª —É –í–∞—à —Ä–µ–±–µ–Ω–æ–∫ –∑–∞ –ø—Ä–æ—à–µ–¥—à–∏–π –º–µ—Å—è—Ü?",
        reply_markup=reply_markup
    )
    return FIRST


async def stool_q_5_4_2(update, _):
    """–ü–æ–∫–∞–∑ –≤—ã–±–æ—Ä–∞ –∫–Ω–æ–ø–æ–∫"""
    dict_mongo[
        "–í —Ç–µ—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –º–µ—Å—è—Ü–∞ –í–∞—à —Ä–µ–±–µ–Ω–æ–∫ —Å–∏–ª—å–Ω–æ —Ç—É–∂–∏–ª—Å—è –≤–æ –≤—Ä–µ–º—è –¥–µ—Ñ–µ–∫–∞—Ü–∏–∏?"] = "–ù–µ—Ç"
    query = update.callback_query
    await query.answer()
    keyboard = [
        [
            InlineKeyboardButton("–ñ–∏–¥–∫–∏–π —Å—Ç—É–ª", callback_data=str(S_E_1_1))
        ],
        [
            InlineKeyboardButton("–õ–µ–Ω—Ç–æ–≤–∏–¥–Ω—ã–π —Å—Ç—É–ª", callback_data=str(S_E_1_2))
        ],
        [
            InlineKeyboardButton("–ö–∞—à–∏—Ü–µ–æ–±—Ä–∞–∑–Ω—ã–π —Å—Ç—É–ª", callback_data=str(S_E_3_1))
        ],
        [
            InlineKeyboardButton("–ü–ª–æ—Ç–Ω—ã–π —Å—Ç—É–ª", callback_data=str(S_E_3_2))
        ],
        [
            InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=str(S_Q_4_4))
        ],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        text="–ö–∞–∫–æ–π –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ü–∏–∏ –±—ã–ª —Å—Ç—É–ª —É –í–∞—à —Ä–µ–±–µ–Ω–æ–∫ –∑–∞ –ø—Ä–æ—à–µ–¥—à–∏–π –º–µ—Å—è—Ü?",
        reply_markup=reply_markup
    )
    return FIRST


async def stool_end_1_1(update, _):
    dict_mongo[
        "–ö–∞–∫–æ–π –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ü–∏–∏ –±—ã–ª —Å—Ç—É–ª —É –í–∞—à —Ä–µ–±–µ–Ω–æ–∫ –∑–∞ –ø—Ä–æ—à–µ–¥—à–∏–π –º–µ—Å—è—Ü?"] = "–ñ–∏–¥–∫–∏–π —Å—Ç—É–ª"
    query = update.callback_query
    await query.answer()
    global recommendations
    recommendations += "–°—Ä–æ—á–Ω–æ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –≤—Ä–∞—á—É –ø–µ–¥–∏–∞—Ç—Ä—É\n"
    keyboard = [
        [
            InlineKeyboardButton("–í–∞—à–µ–≥–æ —Ä–µ–±–µ–Ω–∫–∞ –±–µ—Å–ø–æ–∫–æ–∏—Ç —á—Ç–æ-—Ç–æ –µ—â–µ?", callback_data=str(START_OVER))
        ],
        [
            InlineKeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –≤—Ä–∞—á—É –ø–µ–¥–∏–∞—Ç—Ä—É", callback_data=str(END))
        ],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        text="<b>–°—Ä–æ—á–Ω–æ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –≤—Ä–∞—á—É –ø–µ–¥–∏–∞—Ç—Ä—É</b>",
        parse_mode='HTML',
        reply_markup=reply_markup
    )
    return SECOND


async def stool_end_1_2(update, _):
    dict_mongo[
        "–ö–∞–∫–æ–π –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ü–∏–∏ –±—ã–ª —Å—Ç—É–ª —É –í–∞—à —Ä–µ–±–µ–Ω–æ–∫ –∑–∞ –ø—Ä–æ—à–µ–¥—à–∏–π –º–µ—Å—è—Ü?"] = "–õ–µ–Ω—Ç–æ–≤–∏–¥–Ω—ã–π —Å—Ç—É–ª"
    query = update.callback_query
    await query.answer()
    global recommendations
    recommendations += "–°—Ä–æ—á–Ω–æ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –≤—Ä–∞—á—É –ø–µ–¥–∏–∞—Ç—Ä—É\n"
    keyboard = [
        [
            InlineKeyboardButton("–í–∞—à–µ–≥–æ —Ä–µ–±–µ–Ω–∫–∞ –±–µ—Å–ø–æ–∫–æ–∏—Ç —á—Ç–æ-—Ç–æ –µ—â–µ?", callback_data=str(START_OVER))
        ],
        [
            InlineKeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –≤—Ä–∞—á—É –ø–µ–¥–∏–∞—Ç—Ä—É", callback_data=str(END))
        ],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        text="<b>–°—Ä–æ—á–Ω–æ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –≤—Ä–∞—á—É –ø–µ–¥–∏–∞—Ç—Ä—É</b>",
        parse_mode='HTML',
        reply_markup=reply_markup
    )
    return SECOND


async def stool_end_2_1(update, _):
    dict_mongo[
        "–ö–∞–∫–æ–π –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ü–∏–∏ –±—ã–ª —Å—Ç—É–ª —É –í–∞—à —Ä–µ–±–µ–Ω–æ–∫ –∑–∞ –ø—Ä–æ—à–µ–¥—à–∏–π –º–µ—Å—è—Ü?"] = "–ö–∞—à–∏—Ü–µ–æ–±—Ä–∞–∑–Ω—ã–π —Å—Ç—É–ª"
    query = update.callback_query
    await query.answer()
    global recommendations
    recommendations += "\n<b>–û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –≤—Ä–∞—á—É –ø–µ–¥–∏–∞—Ç—Ä—É</b> –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–µ–∂–∏–º–∞ –ø–∏—Ç–∞–Ω–∏—è;\n" \
                       "–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ü–∏—è –ø–∏—â–µ–≤–æ–≥–æ —Ä–∞—Ü–∏–æ–Ω–∞ –∫–æ—Ä–º—è—â–µ–π –º–∞–º—ã:\n" \
                       "—É–≤–µ–ª–∏—á–∏—Ç—å –≤ —Ä–∞—Ü–∏–æ–Ω–µ –ø—Ä–æ–¥—É–∫—Ç—ã —Å –≤—ã—Å–æ–∫–∏–º —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ–º –ø–∏—â–µ–≤—ã—Ö " \
                       "–≤–æ–ª–æ–∫–æ–Ω (–æ–≤–æ—â–∏, —Ñ—Ä—É–∫—Ç—ã), –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –ø–∏—Ç—å–µ–≤–æ–π —Ä–µ–∂–∏–º, –∫–∏—Å–ª–æ–º–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã;\n" \
                       "–í–≤–µ–¥–µ–Ω–∏–µ –ø—Ä–∏–∫–æ—Ä–º–∞ —Å 4-—Ö –º–µ—Å—è—Ü–µ–≤ ‚Äì –æ–≤–æ—â–Ω–æ–µ –ø—é—Ä–µ.\n"
    keyboard = [
        [
            InlineKeyboardButton("–í–∞—à–µ–≥–æ —Ä–µ–±–µ–Ω–∫–∞ –±–µ—Å–ø–æ–∫–æ–∏—Ç —á—Ç–æ-—Ç–æ –µ—â–µ?", callback_data=str(START_OVER))
        ],
        [
            InlineKeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –≤—Ä–∞—á—É –ø–µ–¥–∏–∞—Ç—Ä—É", callback_data=str(END))
        ],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        text="<b>–û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –≤—Ä–∞—á—É –ø–µ–¥–∏–∞—Ç—Ä—É</b> –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–µ–∂–∏–º–∞ –ø–∏—Ç–∞–Ω–∏—è;\n"
             "–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ü–∏—è –ø–∏—â–µ–≤–æ–≥–æ —Ä–∞—Ü–∏–æ–Ω–∞ –∫–æ—Ä–º—è—â–µ–π –º–∞–º—ã:\n"
             "—É–≤–µ–ª–∏—á–∏—Ç—å –≤ —Ä–∞—Ü–∏–æ–Ω–µ –ø—Ä–æ–¥—É–∫—Ç—ã —Å –≤—ã—Å–æ–∫–∏–º —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ–º –ø–∏—â–µ–≤—ã—Ö "
             "–≤–æ–ª–æ–∫–æ–Ω (–æ–≤–æ—â–∏, —Ñ—Ä—É–∫—Ç—ã), –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –ø–∏—Ç—å–µ–≤–æ–π —Ä–µ–∂–∏–º, –∫–∏—Å–ª–æ–º–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã;\n"
             "–í–≤–µ–¥–µ–Ω–∏–µ –ø—Ä–∏–∫–æ—Ä–º–∞ —Å 4-—Ö –º–µ—Å—è—Ü–µ–≤ ‚Äì –æ–≤–æ—â–Ω–æ–µ –ø—é—Ä–µ.",
        parse_mode='HTML',
        reply_markup=reply_markup
    )
    return SECOND


async def stool_end_2_2(update, _):
    dict_mongo[
        "–ö–∞–∫–æ–π –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ü–∏–∏ –±—ã–ª —Å—Ç—É–ª —É –í–∞—à —Ä–µ–±–µ–Ω–æ–∫ –∑–∞ –ø—Ä–æ—à–µ–¥—à–∏–π –º–µ—Å—è—Ü?"] = "–ü–ª–æ—Ç–Ω—ã–π —Å—Ç—É–ª"
    query = update.callback_query
    await query.answer()
    global recommendations
    recommendations += "\n<b>–û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –≤—Ä–∞—á—É –ø–µ–¥–∏–∞—Ç—Ä—É</b> –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–µ–∂–∏–º–∞ –ø–∏—Ç–∞–Ω–∏—è;\n" \
                       "–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ü–∏—è –ø–∏—â–µ–≤–æ–≥–æ —Ä–∞—Ü–∏–æ–Ω–∞ –∫–æ—Ä–º—è—â–µ–π –º–∞–º—ã:\n" \
                       "—É–≤–µ–ª–∏—á–∏—Ç—å –≤ —Ä–∞—Ü–∏–æ–Ω–µ –ø—Ä–æ–¥—É–∫—Ç—ã —Å –≤—ã—Å–æ–∫–∏–º —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ–º –ø–∏—â–µ–≤—ã—Ö " \
                       "–≤–æ–ª–æ–∫–æ–Ω (–æ–≤–æ—â–∏, —Ñ—Ä—É–∫—Ç—ã), –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –ø–∏—Ç—å–µ–≤–æ–π —Ä–µ–∂–∏–º, –∫–∏—Å–ª–æ–º–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã;\n" \
                       "–í–≤–µ–¥–µ–Ω–∏–µ –ø—Ä–∏–∫–æ—Ä–º–∞ —Å 4-—Ö –º–µ—Å—è—Ü–µ–≤ ‚Äì –æ–≤–æ—â–Ω–æ–µ –ø—é—Ä–µ.\n"
    keyboard = [
        [
            InlineKeyboardButton("–í–∞—à–µ–≥–æ —Ä–µ–±–µ–Ω–∫–∞ –±–µ—Å–ø–æ–∫–æ–∏—Ç —á—Ç–æ-—Ç–æ –µ—â–µ?", callback_data=str(START_OVER))
        ],
        [
            InlineKeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –≤—Ä–∞—á—É –ø–µ–¥–∏–∞—Ç—Ä—É", callback_data=str(END))
        ],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        text="<b>–û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –≤—Ä–∞—á—É –ø–µ–¥–∏–∞—Ç—Ä—É</b> –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–µ–∂–∏–º–∞ –ø–∏—Ç–∞–Ω–∏—è;\n"
             "–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ü–∏—è –ø–∏—â–µ–≤–æ–≥–æ —Ä–∞—Ü–∏–æ–Ω–∞ –∫–æ—Ä–º—è—â–µ–π –º–∞–º—ã:\n"
             "—É–≤–µ–ª–∏—á–∏—Ç—å –≤ —Ä–∞—Ü–∏–æ–Ω–µ –ø—Ä–æ–¥—É–∫—Ç—ã —Å –≤—ã—Å–æ–∫–∏–º —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ–º –ø–∏—â–µ–≤—ã—Ö "
             "–≤–æ–ª–æ–∫–æ–Ω (–æ–≤–æ—â–∏, —Ñ—Ä—É–∫—Ç—ã), –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –ø–∏—Ç—å–µ–≤–æ–π —Ä–µ–∂–∏–º, –∫–∏—Å–ª–æ–º–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã;\n"
             "–í–≤–µ–¥–µ–Ω–∏–µ –ø—Ä–∏–∫–æ—Ä–º–∞ —Å 4-—Ö –º–µ—Å—è—Ü–µ–≤ ‚Äì –æ–≤–æ—â–Ω–æ–µ –ø—é—Ä–µ.",
        parse_mode='HTML',
        reply_markup=reply_markup
    )
    return SECOND


async def stool_end_3_1(update, _):
    dict_mongo[
        "–ö–∞–∫–æ–π –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ü–∏–∏ –±—ã–ª —Å—Ç—É–ª —É –í–∞—à —Ä–µ–±–µ–Ω–æ–∫ –∑–∞ –ø—Ä–æ—à–µ–¥—à–∏–π –º–µ—Å—è—Ü?"] = "–ö–∞—à–∏—Ü–µ–æ–±—Ä–∞–∑–Ω—ã–π —Å—Ç—É–ª"
    query = update.callback_query
    await query.answer()
    global recommendations
    recommendations += "\n<b>–û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –≤—Ä–∞—á—É –ø–µ–¥–∏–∞—Ç—Ä—É</b> –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏ " \
                       "–ø–∏—â–µ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞ –ø–∏—Ç–∞–Ω–∏—è, –ø–∏—Ç—å–µ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞ –ø–∏—Ç–∞–Ω–∏—è –∏ –≤—ã–±–æ—Ä–∞ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π —Å–º–µ—Å–∏;\n" \
                       "–í–≤–µ–¥–µ–Ω–∏–µ –ø—Ä–∏–∫–æ—Ä–º–∞ —Å 4-—Ö –º–µ—Å—è—Ü–µ–≤ ‚Äì –æ–≤–æ—â–Ω–æ–µ –ø—é—Ä–µ.\n"
    keyboard = [
        [
            InlineKeyboardButton("–í–∞—à–µ–≥–æ —Ä–µ–±–µ–Ω–∫–∞ –±–µ—Å–ø–æ–∫–æ–∏—Ç —á—Ç–æ-—Ç–æ –µ—â–µ?", callback_data=str(START_OVER))
        ],
        [
            InlineKeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –≤—Ä–∞—á—É –ø–µ–¥–∏–∞—Ç—Ä—É", callback_data=str(END))
        ],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        text="<b>–û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –≤—Ä–∞—á—É –ø–µ–¥–∏–∞—Ç—Ä—É</b> –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏ "
             "–ø–∏—â–µ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞ –ø–∏—Ç–∞–Ω–∏—è, –ø–∏—Ç—å–µ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞ –ø–∏—Ç–∞–Ω–∏—è –∏ –≤—ã–±–æ—Ä–∞ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π —Å–º–µ—Å–∏;\n"
             "–í–≤–µ–¥–µ–Ω–∏–µ –ø—Ä–∏–∫–æ—Ä–º–∞ —Å 4-—Ö –º–µ—Å—è—Ü–µ–≤ ‚Äì –æ–≤–æ—â–Ω–æ–µ –ø—é—Ä–µ.",
        parse_mode='HTML',
        reply_markup=reply_markup
    )
    return SECOND


async def stool_end_3_2(update, _):
    dict_mongo[
        "–ö–∞–∫–æ–π –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ü–∏–∏ –±—ã–ª —Å—Ç—É–ª —É –í–∞—à —Ä–µ–±–µ–Ω–æ–∫ –∑–∞ –ø—Ä–æ—à–µ–¥—à–∏–π –º–µ—Å—è—Ü?"] = "–ü–ª–æ—Ç–Ω—ã–π —Å—Ç—É–ª"
    query = update.callback_query
    await query.answer()
    global recommendations
    recommendations += "\n<b>–û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –≤—Ä–∞—á—É –ø–µ–¥–∏–∞—Ç—Ä—É</b> –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏ " \
                       "–ø–∏—â–µ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞ –ø–∏—Ç–∞–Ω–∏—è, –ø–∏—Ç—å–µ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞ –ø–∏—Ç–∞–Ω–∏—è –∏ –≤—ã–±–æ—Ä–∞ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π —Å–º–µ—Å–∏;\n" \
                       "–í–≤–µ–¥–µ–Ω–∏–µ –ø—Ä–∏–∫–æ—Ä–º–∞ —Å 4-—Ö –º–µ—Å—è—Ü–µ–≤ ‚Äì –æ–≤–æ—â–Ω–æ–µ –ø—é—Ä–µ.\n"
    keyboard = [
        [
            InlineKeyboardButton("–í–∞—à–µ–≥–æ —Ä–µ–±–µ–Ω–∫–∞ –±–µ—Å–ø–æ–∫–æ–∏—Ç —á—Ç–æ-—Ç–æ –µ—â–µ?", callback_data=str(START_OVER))
        ],
        [
            InlineKeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –≤—Ä–∞—á—É –ø–µ–¥–∏–∞—Ç—Ä—É", callback_data=str(END))
        ],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        text="<b>–û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –≤—Ä–∞—á—É –ø–µ–¥–∏–∞—Ç—Ä—É</b> –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏ "
             "–ø–∏—â–µ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞ –ø–∏—Ç–∞–Ω–∏—è, –ø–∏—Ç—å–µ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞ –ø–∏—Ç–∞–Ω–∏—è –∏ –≤—ã–±–æ—Ä–∞ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π —Å–º–µ—Å–∏;\n"
             "–í–≤–µ–¥–µ–Ω–∏–µ –ø—Ä–∏–∫–æ—Ä–º–∞ —Å 4-—Ö –º–µ—Å—è—Ü–µ–≤ ‚Äì –æ–≤–æ—â–Ω–æ–µ –ø—é—Ä–µ.",
        parse_mode='HTML',
        reply_markup=reply_markup
    )
    return SECOND


async def reg_q_1(update, _):
    """–ü–æ–∫–∞–∑ –Ω–æ–≤–æ–≥–æ –≤—ã–±–æ—Ä–∞ –∫–Ω–æ–ø–æ–∫"""
    print(update.callback_query.data)
    query = update.callback_query
    print(query)
    await query.answer()
    keyboard = [
        [
            InlineKeyboardButton("–ú–µ–Ω–µ–µ 1 –Ω–µ–¥–µ–ª–∏", callback_data=str(R_Q_2_1))
        ],
        [
            InlineKeyboardButton("–ú–µ–Ω–µ–µ 2-x –Ω–µ–¥–µ–ª–∏", callback_data=str(R_Q_2_2))
        ],
        [
            InlineKeyboardButton("–ë–æ–ª–µ–µ 2-—Ö –Ω–µ–¥–µ–ª—å", callback_data=str(R_Q_2_3))
        ],
        [
            InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=str(START_OVER))
        ],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        text=" –í —Ç–µ—á–µ–Ω–∏–µ –∫–∞–∫–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—Ä—ã–≥–∏–≤–∞–Ω–∏—è –±–µ—Å–ø–æ–∫–æ—è—Ç –í–∞—à–µ–≥–æ —Ä–µ–±–µ–Ω–∫–∞?", reply_markup=reply_markup
    )
    return FIRST


async def reg_q_2_1(update, _):
    """–ü–æ–∫–∞–∑ –≤—ã–±–æ—Ä–∞ –∫–Ω–æ–ø–æ–∫"""
    dict_mongo[
        "–í —Ç–µ—á–µ–Ω–∏–µ –∫–∞–∫–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—Ä—ã–≥–∏–≤–∞–Ω–∏—è –±–µ—Å–ø–æ–∫–æ—è—Ç –í–∞—à–µ–≥–æ —Ä–µ–±–µ–Ω–∫–∞?"] = "–ú–µ–Ω–µ–µ 1 –Ω–µ–¥–µ–ª–∏"
    query = update.callback_query
    await query.answer()
    keyboard = [
        [
            InlineKeyboardButton("–û–±—ä–µ–º —á–∞–π–Ω–æ–π –ª–æ–∂–∫–∏", callback_data=str(R_Q_3_1_1))
        ],
        [
            InlineKeyboardButton("–û–±—ä–µ–º —Å—Ç–æ–ª–æ–≤–æ–π –ª–æ–∂–∫–∏", callback_data=str(R_Q_3_1_2))
        ],
        [
            InlineKeyboardButton("1/3 –∏–ª–∏ ¬Ω –æ—Ç –æ–±—ä–µ–º–∞ —Å—ä–µ–¥–µ–Ω–Ω–æ–π –ø–∏—â–∏", callback_data=str(R_Q_3_2))
        ],
        [
            InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=str(R_Q_1))
        ],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        text="–ö–∞–∫–æ–π –æ–±—ä–µ–º –æ–¥–Ω–æ–≥–æ —Å—Ä—ã–≥–∏–≤–∞–Ω–∏—è?", reply_markup=reply_markup
    )
    return FIRST


async def reg_q_2_2(update, _):
    """–ü–æ–∫–∞–∑ –≤—ã–±–æ—Ä–∞ –∫–Ω–æ–ø–æ–∫"""
    dict_mongo[
        "–í —Ç–µ—á–µ–Ω–∏–µ –∫–∞–∫–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—Ä—ã–≥–∏–≤–∞–Ω–∏—è –±–µ—Å–ø–æ–∫–æ—è—Ç –í–∞—à–µ–≥–æ —Ä–µ–±–µ–Ω–∫–∞?"] = "–ú–µ–Ω–µ–µ 2-x –Ω–µ–¥–µ–ª–∏"
    query = update.callback_query
    await query.answer()
    keyboard = [
        [
            InlineKeyboardButton("–û–±—ä–µ–º —á–∞–π–Ω–æ–π –ª–æ–∂–∫–∏", callback_data=str(R_Q_3_1_1))
        ],
        [
            InlineKeyboardButton("–û–±—ä–µ–º —Å—Ç–æ–ª–æ–≤–æ–π –ª–æ–∂–∫–∏", callback_data=str(R_Q_3_1_2))
        ],
        [
            InlineKeyboardButton("1/3 –∏–ª–∏ ¬Ω –æ—Ç –æ–±—ä–µ–º–∞ —Å—ä–µ–¥–µ–Ω–Ω–æ–π –ø–∏—â–∏", callback_data=str(R_Q_3_2))
        ],
        [
            InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=str(R_Q_1))
        ],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        text="–ö–∞–∫–æ–π –æ–±—ä–µ–º –æ–¥–Ω–æ–≥–æ —Å—Ä—ã–≥–∏–≤–∞–Ω–∏—è?", reply_markup=reply_markup
    )
    return FIRST


async def reg_q_2_3(update, _):
    """–ü–æ–∫–∞–∑ –≤—ã–±–æ—Ä–∞ –∫–Ω–æ–ø–æ–∫"""
    dict_mongo[
        "–í —Ç–µ—á–µ–Ω–∏–µ –∫–∞–∫–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—Ä—ã–≥–∏–≤–∞–Ω–∏—è –±–µ—Å–ø–æ–∫–æ—è—Ç –í–∞—à–µ–≥–æ —Ä–µ–±–µ–Ω–∫–∞?"] = "–ë–æ–ª–µ–µ 2-—Ö –Ω–µ–¥–µ–ª—å"
    query = update.callback_query
    await query.answer()
    keyboard = [
        [
            InlineKeyboardButton("–û–±—ä–µ–º —á–∞–π–Ω–æ–π –ª–æ–∂–∫–∏", callback_data=str(R_Q_3_1_1))
        ],
        [
            InlineKeyboardButton("–û–±—ä–µ–º —Å—Ç–æ–ª–æ–≤–æ–π –ª–æ–∂–∫–∏", callback_data=str(R_Q_3_1_2))
        ],
        [
            InlineKeyboardButton("1/3 –∏–ª–∏ ¬Ω –æ—Ç –æ–±—ä–µ–º–∞ —Å—ä–µ–¥–µ–Ω–Ω–æ–π –ø–∏—â–∏", callback_data=str(R_Q_3_2))
        ],
        [
            InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=str(R_Q_1))
        ],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        text="–ö–∞–∫–æ–π –æ–±—ä–µ–º –æ–¥–Ω–æ–≥–æ —Å—Ä—ã–≥–∏–≤–∞–Ω–∏—è?", reply_markup=reply_markup
    )
    return FIRST


async def reg_q_3_1_1(update, _):
    """–ü–æ–∫–∞–∑ –≤—ã–±–æ—Ä–∞ –∫–Ω–æ–ø–æ–∫"""
    dict_mongo[
        "–ö–∞–∫–æ–π –æ–±—ä–µ–º –æ–¥–Ω–æ–≥–æ —Å—Ä—ã–≥–∏–≤–∞–Ω–∏—è?"] = "–û–±—ä–µ–º —á–∞–π–Ω–æ–π –ª–æ–∂–∫–∏"
    query = update.callback_query
    await query.answer()
    keyboard = [
        [
            InlineKeyboardButton("–ù–µ–∏–∑–º–µ–Ω–Ω–æ–µ –º–æ–ª–æ–∫–æ", callback_data=str(R_Q_4_1_1))
        ],
        [
            InlineKeyboardButton("–°—Ç–≤–æ—Ä–æ–∂–µ–Ω–Ω–æ–µ –º–æ–ª–æ–∫–æ", callback_data=str(R_Q_4_1_2))
        ],
        [
            InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=str(R_Q_2_1))
        ],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        text="–ö–∞–∫–æ–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Å—Ä—ã–≥–∏–≤–∞–Ω–∏—è?", reply_markup=reply_markup
    )
    return FIRST


async def reg_q_3_1_2(update, _):
    """–ü–æ–∫–∞–∑ –≤—ã–±–æ—Ä–∞ –∫–Ω–æ–ø–æ–∫"""
    dict_mongo[
        "–ö–∞–∫–æ–π –æ–±—ä–µ–º –æ–¥–Ω–æ–≥–æ —Å—Ä—ã–≥–∏–≤–∞–Ω–∏—è?"] = "–û–±—ä–µ–º —Å—Ç–æ–ª–æ–≤–æ–π –ª–æ–∂–∫–∏"
    query = update.callback_query
    await query.answer()
    keyboard = [
        [
            InlineKeyboardButton("–ù–µ–∏–∑–º–µ–Ω–Ω–æ–µ –º–æ–ª–æ–∫–æ", callback_data=str(R_Q_4_1_1))
        ],
        [
            InlineKeyboardButton("–°—Ç–≤–æ—Ä–æ–∂–µ–Ω–Ω–æ–µ –º–æ–ª–æ–∫–æ", callback_data=str(R_Q_4_1_2))
        ],
        [
            InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=str(R_Q_2_1))
        ],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        text="–ö–∞–∫–æ–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Å—Ä—ã–≥–∏–≤–∞–Ω–∏—è?", reply_markup=reply_markup
    )
    return FIRST


async def reg_q_3_2(update, _):
    """–ü–æ–∫–∞–∑ –≤—ã–±–æ—Ä–∞ –∫–Ω–æ–ø–æ–∫"""
    dict_mongo[
        "–ö–∞–∫–æ–π –æ–±—ä–µ–º –æ–¥–Ω–æ–≥–æ —Å—Ä—ã–≥–∏–≤–∞–Ω–∏—è?"] = "1/3 –∏–ª–∏ ¬Ω –æ—Ç –æ–±—ä–µ–º–∞ —Å—ä–µ–¥–µ–Ω–Ω–æ–π –ø–∏—â–∏"
    query = update.callback_query
    await query.answer()
    keyboard = [
        [
            InlineKeyboardButton("–ù–µ–∏–∑–º–µ–Ω–Ω–æ–µ –º–æ–ª–æ–∫–æ", callback_data=str(R_Q_4_2_1))
        ],
        [
            InlineKeyboardButton("–°—Ç–≤–æ—Ä–æ–∂–µ–Ω–Ω–æ–µ –º–æ–ª–æ–∫–æ", callback_data=str(R_Q_4_2_2))
        ],
        [
            InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=str(R_Q_2_1))
        ],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        text="–ö–∞–∫–æ–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Å—Ä—ã–≥–∏–≤–∞–Ω–∏—è?", reply_markup=reply_markup
    )
    return FIRST


async def reg_q_4_1_1(update, _):
    """–ü–æ–∫–∞–∑ –≤—ã–±–æ—Ä–∞ –∫–Ω–æ–ø–æ–∫"""
    dict_mongo[
        "–ö–∞–∫–æ–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Å—Ä—ã–≥–∏–≤–∞–Ω–∏—è?"] = "–ù–µ–∏–∑–º–µ–Ω–Ω–æ–µ –º–æ–ª–æ–∫–æ"
    query = update.callback_query
    await query.answer()
    keyboard = [
        [
            InlineKeyboardButton("–ù–µ—Ç", callback_data=str(R_Q_5_1))
        ],
        [
            InlineKeyboardButton("–î–∞", callback_data=str(R_Q_5_2_2))
        ],
        [
            InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=str(R_Q_3_1_1))
        ],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        text="–ï—Å—Ç—å –ª–∏ —É –í–∞—à–µ–≥–æ —Ä–µ–±–µ–Ω–∫–∞ –æ–¥–Ω–∞ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–∑ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω—ã—Ö –∂–∞–ª–æ–±- —Å–Ω–∏–∂–µ–Ω–∏–µ –º–∞—Å—Å—ã —Ç–µ–ª–∞; —Ä–≤–æ—Ç–∞ —Ñ–æ–Ω—Ç–∞–Ω–æ–º; —Ä–≤–æ—Ç–∞ —Å –ø—Ä–∏–º–µ—Å—å—é –∫—Ä–æ–≤–∏ –∏–ª–∏ –∂–µ–ª—á–∏? ",
        reply_markup=reply_markup
    )
    return FIRST


async def reg_q_4_1_2(update, _):
    """–ü–æ–∫–∞–∑ –≤—ã–±–æ—Ä–∞ –∫–Ω–æ–ø–æ–∫"""
    dict_mongo[
        "–ö–∞–∫–æ–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Å—Ä—ã–≥–∏–≤–∞–Ω–∏—è?"] = "–°—Ç–≤–æ—Ä–æ–∂–µ–Ω–Ω–æ–µ –º–æ–ª–æ–∫–æ"
    query = update.callback_query
    await query.answer()
    keyboard = [
        [
            InlineKeyboardButton("–ù–µ—Ç", callback_data=str(R_Q_5_1))
        ],
        [
            InlineKeyboardButton("–î–∞", callback_data=str(R_Q_5_2_2))
        ],
        [
            InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=str(R_Q_3_1_1))
        ],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        text="–ï—Å—Ç—å –ª–∏ —É –í–∞—à–µ–≥–æ —Ä–µ–±–µ–Ω–∫–∞ –æ–¥–Ω–∞ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–∑ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω—ã—Ö –∂–∞–ª–æ–±- —Å–Ω–∏–∂–µ–Ω–∏–µ –º–∞—Å—Å—ã —Ç–µ–ª–∞; —Ä–≤–æ—Ç–∞ —Ñ–æ–Ω—Ç–∞–Ω–æ–º; —Ä–≤–æ—Ç–∞ —Å –ø—Ä–∏–º–µ—Å—å—é –∫—Ä–æ–≤–∏ –∏–ª–∏ –∂–µ–ª—á–∏? ",
        reply_markup=reply_markup
    )
    return FIRST


async def reg_q_4_2_1(update, _):
    """–ü–æ–∫–∞–∑ –≤—ã–±–æ—Ä–∞ –∫–Ω–æ–ø–æ–∫"""
    dict_mongo[
        "–ö–∞–∫–æ–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Å—Ä—ã–≥–∏–≤–∞–Ω–∏—è?"] = "–ù–µ–∏–∑–º–µ–Ω–Ω–æ–µ –º–æ–ª–æ–∫–æ"
    query = update.callback_query
    await query.answer()
    keyboard = [
        [
            InlineKeyboardButton("–ù–µ—Ç", callback_data=str(R_Q_5_2_1))
        ],
        [
            InlineKeyboardButton("–î–∞", callback_data=str(R_Q_5_2_2))
        ],
        [
            InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=str(R_Q_3_2))
        ],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        text="–ï—Å—Ç—å –ª–∏ —É –í–∞—à–µ–≥–æ —Ä–µ–±–µ–Ω–∫–∞ –æ–¥–Ω–∞ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–∑ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω—ã—Ö –∂–∞–ª–æ–±- —Å–Ω–∏–∂–µ–Ω–∏–µ –º–∞—Å—Å—ã —Ç–µ–ª–∞; —Ä–≤–æ—Ç–∞ —Ñ–æ–Ω—Ç–∞–Ω–æ–º; —Ä–≤–æ—Ç–∞ —Å –ø—Ä–∏–º–µ—Å—å—é –∫—Ä–æ–≤–∏ –∏–ª–∏ –∂–µ–ª—á–∏? ",
        reply_markup=reply_markup
    )
    return FIRST


async def reg_q_4_2_2(update, _):
    """–ü–æ–∫–∞–∑ –≤—ã–±–æ—Ä–∞ –∫–Ω–æ–ø–æ–∫"""
    dict_mongo[
        "–ö–∞–∫–æ–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Å—Ä—ã–≥–∏–≤–∞–Ω–∏—è?"] = "–°—Ç–≤–æ—Ä–æ–∂–µ–Ω–Ω–æ–µ –º–æ–ª–æ–∫–æ"
    query = update.callback_query
    await query.answer()
    keyboard = [
        [
            InlineKeyboardButton("–ù–µ—Ç", callback_data=str(R_Q_5_2_1))
        ],
        [
            InlineKeyboardButton("–î–∞", callback_data=str(R_Q_5_2_2))
        ],
        [
            InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=str(R_Q_3_2))
        ],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        text="–ï—Å—Ç—å –ª–∏ —É –í–∞—à–µ–≥–æ —Ä–µ–±–µ–Ω–∫–∞ –æ–¥–Ω–∞ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–∑ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω—ã—Ö –∂–∞–ª–æ–±- —Å–Ω–∏–∂–µ–Ω–∏–µ –º–∞—Å—Å—ã —Ç–µ–ª–∞; —Ä–≤–æ—Ç–∞ —Ñ–æ–Ω—Ç–∞–Ω–æ–º; —Ä–≤–æ—Ç–∞ —Å –ø—Ä–∏–º–µ—Å—å—é –∫—Ä–æ–≤–∏ –∏–ª–∏ –∂–µ–ª—á–∏? ",
        reply_markup=reply_markup
    )
    return FIRST


async def reg_q_5_1(update, _):
    """–ü–æ–∫–∞–∑ –≤—ã–±–æ—Ä–∞ –∫–Ω–æ–ø–æ–∫"""
    dict_mongo[
        "–ï—Å—Ç—å –ª–∏ —É –í–∞—à–µ–≥–æ —Ä–µ–±–µ–Ω–∫–∞ –æ–¥–Ω–∞ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–∑ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω—ã—Ö –∂–∞–ª–æ–±- —Å–Ω–∏–∂–µ–Ω–∏–µ –º–∞—Å—Å—ã —Ç–µ–ª–∞; —Ä–≤–æ—Ç–∞ —Ñ–æ–Ω—Ç–∞–Ω–æ–º; —Ä–≤–æ—Ç–∞ —Å –ø—Ä–∏–º–µ—Å—å—é –∫—Ä–æ–≤–∏ –∏–ª–∏ –∂–µ–ª—á–∏?"] = "–ù–µ—Ç"
    query = update.callback_query
    await query.answer()
    keyboard = [
        [
            InlineKeyboardButton("–°—Ä–∞–∑—É –ø–æ—Å–ª–µ –∫–æ—Ä–º–ª–µ–Ω–∏—è", callback_data=str(R_Q_6_1_1))
        ],
        [
            InlineKeyboardButton("–ß–µ—Ä–µ–∑ 1 —á–∞—Å –ø–æ—Å–ª–µ –∫–æ—Ä–º–ª–µ–Ω–∏—è", callback_data=str(R_Q_6_1_2))
        ],
        [
            InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=str(R_Q_4_1_1))
        ],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        text="–ß–µ—Ä–µ–∑ –∫–∞–∫–æ–µ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ –∫–æ—Ä–º–ª–µ–Ω–∏—è –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Å—Ä—ã–≥–∏–≤–∞–Ω–∏–µ?", reply_markup=reply_markup
    )
    return FIRST


async def reg_q_5_2_1(update, _):
    dict_mongo[
        "–ï—Å—Ç—å –ª–∏ —É –í–∞—à–µ–≥–æ —Ä–µ–±–µ–Ω–∫–∞ –æ–¥–Ω–∞ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–∑ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω—ã—Ö –∂–∞–ª–æ–±- —Å–Ω–∏–∂–µ–Ω–∏–µ –º–∞—Å—Å—ã —Ç–µ–ª–∞; —Ä–≤–æ—Ç–∞ —Ñ–æ–Ω—Ç–∞–Ω–æ–º; —Ä–≤–æ—Ç–∞ —Å –ø—Ä–∏–º–µ—Å—å—é –∫—Ä–æ–≤–∏ –∏–ª–∏ –∂–µ–ª—á–∏?"] = "–ù–µ—Ç"
    query = update.callback_query
    await query.answer()
    keyboard = [
        [
            InlineKeyboardButton("–°—Ä–∞–∑—É –ø–æ—Å–ª–µ –∫–æ—Ä–º–ª–µ–Ω–∏—è", callback_data=str(R_Q_6_2_1))
        ],
        [
            InlineKeyboardButton("–ß–µ—Ä–µ–∑ 1 —á–∞—Å –ø–æ—Å–ª–µ –∫–æ—Ä–º–ª–µ–Ω–∏—è", callback_data=str(R_Q_6_2_2))
        ],
        [
            InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=str(R_Q_4_2_1))
        ],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        text="–ß–µ—Ä–µ–∑ –∫–∞–∫–æ–µ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ –∫–æ—Ä–º–ª–µ–Ω–∏—è –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Å—Ä—ã–≥–∏–≤–∞–Ω–∏–µ?", reply_markup=reply_markup
    )
    return FIRST


async def reg_q_5_2_2(update, _):
    dict_mongo[
        "–ï—Å—Ç—å –ª–∏ —É –í–∞—à–µ–≥–æ —Ä–µ–±–µ–Ω–∫–∞ –æ–¥–Ω–∞ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–∑ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω—ã—Ö –∂–∞–ª–æ–±- —Å–Ω–∏–∂–µ–Ω–∏–µ –º–∞—Å—Å—ã —Ç–µ–ª–∞; —Ä–≤–æ—Ç–∞ —Ñ–æ–Ω—Ç–∞–Ω–æ–º; —Ä–≤–æ—Ç–∞ —Å –ø—Ä–∏–º–µ—Å—å—é –∫—Ä–æ–≤–∏ –∏–ª–∏ –∂–µ–ª—á–∏?"] = "–î–∞"
    query = update.callback_query
    await query.answer()
    keyboard = [
        [
            InlineKeyboardButton("–°—Ä–∞–∑—É –ø–æ—Å–ª–µ –∫–æ—Ä–º–ª–µ–Ω–∏—è", callback_data=str(R_Q_6_2_1))
        ],
        [
            InlineKeyboardButton("–ß–µ—Ä–µ–∑ 1 —á–∞—Å –ø–æ—Å–ª–µ –∫–æ—Ä–º–ª–µ–Ω–∏—è", callback_data=str(R_Q_6_2_2))
        ],
        [
            InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=str(R_Q_4_2_1))
        ],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        text="–ß–µ—Ä–µ–∑ –∫–∞–∫–æ–µ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ –∫–æ—Ä–º–ª–µ–Ω–∏—è –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Å—Ä—ã–≥–∏–≤–∞–Ω–∏–µ?", reply_markup=reply_markup
    )
    return FIRST


async def reg_q_6_1_1(update, _):
    """–ü–æ–∫–∞–∑ –≤—ã–±–æ—Ä–∞ –∫–Ω–æ–ø–æ–∫"""
    dict_mongo[
        "–ß–µ—Ä–µ–∑ –∫–∞–∫–æ–µ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ –∫–æ—Ä–º–ª–µ–Ω–∏—è –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Å—Ä—ã–≥–∏–≤–∞–Ω–∏–µ?"] = "–°—Ä–∞–∑—É –ø–æ—Å–ª–µ –∫–æ—Ä–º–ª–µ–Ω–∏—è"
    query = update.callback_query
    await query.answer()
    keyboard = [
        [
            InlineKeyboardButton("–ù–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é", callback_data=str(R_E_1))
        ],
        [
            InlineKeyboardButton("1-2 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å", callback_data=str(R_E_2_1))
        ],
        [
            InlineKeyboardButton("–ë–æ–ª—å—à–µ 3-—Ö —Ä–∞–∑ –≤ –¥–µ–Ω—å –∏–ª–∏ –∫–∞–∂–¥–æ–µ –≤—Å–∫–∞—Ä–º–ª–∏–≤–∞–Ω–∏–µ", callback_data=str(R_E_2_2))
        ],
        [
            InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=str(R_Q_5_1))
        ],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        text="–ö–∞–∫ —á–∞—Å—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Å—Ä—ã–≥–∏–≤–∞–Ω–∏–µ?", reply_markup=reply_markup
    )
    return FIRST


async def reg_q_6_1_2(update, _):
    """–ü–æ–∫–∞–∑ –≤—ã–±–æ—Ä–∞ –∫–Ω–æ–ø–æ–∫"""
    dict_mongo[
        "–ß–µ—Ä–µ–∑ –∫–∞–∫–æ–µ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ –∫–æ—Ä–º–ª–µ–Ω–∏—è –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Å—Ä—ã–≥–∏–≤–∞–Ω–∏–µ?"] = "–ß–µ—Ä–µ–∑ 1 —á–∞—Å –ø–æ—Å–ª–µ –∫–æ—Ä–º–ª–µ–Ω–∏—è"
    query = update.callback_query
    await query.answer()
    keyboard = [
        [
            InlineKeyboardButton("–ù–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é", callback_data=str(R_E_1))
        ],
        [
            InlineKeyboardButton("1-2 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å", callback_data=str(R_E_2_1))
        ],
        [
            InlineKeyboardButton("–ë–æ–ª—å—à–µ 3-—Ö —Ä–∞–∑ –≤ –¥–µ–Ω—å –∏–ª–∏ –∫–∞–∂–¥–æ–µ –≤—Å–∫–∞—Ä–º–ª–∏–≤–∞–Ω–∏–µ", callback_data=str(R_E_2_2))
        ],
        [
            InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=str(R_Q_5_1))
        ],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        text="–ö–∞–∫ —á–∞—Å—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Å—Ä—ã–≥–∏–≤–∞–Ω–∏–µ?", reply_markup=reply_markup
    )
    return FIRST


async def reg_q_6_2_1(update, _):
    """–ü–æ–∫–∞–∑ –≤—ã–±–æ—Ä–∞ –∫–Ω–æ–ø–æ–∫"""
    dict_mongo[
        "–ß–µ—Ä–µ–∑ –∫–∞–∫–æ–µ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ –∫–æ—Ä–º–ª–µ–Ω–∏—è –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Å—Ä—ã–≥–∏–≤–∞–Ω–∏–µ?"] = "–°—Ä–∞–∑—É –ø–æ—Å–ª–µ –∫–æ—Ä–º–ª–µ–Ω–∏—è"
    query = update.callback_query
    await query.answer()
    keyboard = [
        [
            InlineKeyboardButton("–ù–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é", callback_data=str(R_E_1))
        ],
        [
            InlineKeyboardButton("1-2 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å", callback_data=str(R_E_2_1))
        ],
        [
            InlineKeyboardButton("–ë–æ–ª—å—à–µ 3-—Ö —Ä–∞–∑ –≤ –¥–µ–Ω—å –∏–ª–∏ –∫–∞–∂–¥–æ–µ –≤—Å–∫–∞—Ä–º–ª–∏–≤–∞–Ω–∏–µ", callback_data=str(R_E_3))
        ],
        [
            InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=str(R_Q_5_2_1))
        ],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        text="–ö–∞–∫ —á–∞—Å—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Å—Ä—ã–≥–∏–≤–∞–Ω–∏–µ?", reply_markup=reply_markup
    )
    return FIRST


async def reg_q_6_2_2(update, _):
    """–ü–æ–∫–∞–∑ –≤—ã–±–æ—Ä–∞ –∫–Ω–æ–ø–æ–∫"""
    dict_mongo[
        "–ß–µ—Ä–µ–∑ –∫–∞–∫–æ–µ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ –∫–æ—Ä–º–ª–µ–Ω–∏—è –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Å—Ä—ã–≥–∏–≤–∞–Ω–∏–µ?"] = "–ß–µ—Ä–µ–∑ 1 —á–∞—Å –ø–æ—Å–ª–µ –∫–æ—Ä–º–ª–µ–Ω–∏—è"
    query = update.callback_query
    await query.answer()
    keyboard = [
        [
            InlineKeyboardButton("–ù–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é", callback_data=str(R_E_1))
        ],
        [
            InlineKeyboardButton("1-2 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å", callback_data=str(R_E_2_1))
        ],
        [
            InlineKeyboardButton("–ë–æ–ª—å—à–µ 3-—Ö —Ä–∞–∑ –≤ –¥–µ–Ω—å –∏–ª–∏ –∫–∞–∂–¥–æ–µ –≤—Å–∫–∞—Ä–º–ª–∏–≤–∞–Ω–∏–µ", callback_data=str(R_E_3))
        ],
        [
            InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=str(R_Q_5_2_1))
        ],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        text="–ö–∞–∫ —á–∞—Å—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Å—Ä—ã–≥–∏–≤–∞–Ω–∏–µ?", reply_markup=reply_markup
    )
    return FIRST


async def reg_end_1(update, _):
    dict_mongo[
        "–ö–∞–∫ —á–∞—Å—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Å—Ä—ã–≥–∏–≤–∞–Ω–∏–µ?"] = "–ù–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é"
    query = update.callback_query
    await query.answer()
    global recommendations
    recommendations += "\n–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–∞ –ø–æ—Å—Ç—É—Ä–∞–ª—å–Ω–∞—è —Ç–µ—Ä–∞–ø–∏—è: \n" \
                       "–ö–æ—Ä–º–ª–µ–Ω–∏–µ —Ä–µ–±–µ–Ω–∫–∞ –ø–æ–¥ —É–≥–ª–æ–º 45-60 –≥—Ä–∞–¥—É—Å–æ–≤;\n" \
                       "–£–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Ä–µ–±–µ–Ω–∫–∞ –ø–æ—Å–ª–µ –∫–æ—Ä–º–ª–µ–Ω–∏—è –≤ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–º –ø–æ–ª–æ–∂–µ–Ω–∏–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 20-30 –º–∏–Ω—É—Ç;\n" \
                       "–°–ª–µ–¥–∏—Ç—å –∑–∞ —Ç–µ–º, —á—Ç–æ–±—ã –º–ª–∞–¥–µ–Ω–µ—Ü –∑–∞–≥–ª–∞—Ç—ã–≤–∞–ª —Å–æ—Å–æ–∫ " \
                       "–≤–º–µ—Å—Ç–µ —Å –∞—Ä–µ–æ–ª–æ–π –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∑–∞–≥–ª–∞—Ç—ã–≤–∞–Ω–∏—è –≤–æ–∑–¥—É—Ö–∞;\n" \
                       "–ü—Ä–∏ –∫–æ—Ä–º–ª–µ–Ω–∏–∏ –∏–∑ –±—É—Ç—ã–ª–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–ø–æ–ª–Ω—è—Ç—å —Å–æ—Å–∫—É;\n" \
                       "–°–ª–µ–¥–∏—Ç—å –∑–∞ —Ç–µ–º, —á—Ç–æ–±—ã –æ–¥–µ–∂–¥–∞ –Ω–µ —Å–¥–∞–≤–ª–∏–≤–∞–ª–∞ –∂–∏–≤–æ—Ç —Ä–µ–±–µ–Ω–∫–∞.\n"
    keyboard = [
        [
            InlineKeyboardButton("–í–∞—à–µ–≥–æ —Ä–µ–±–µ–Ω–∫–∞ –±–µ—Å–ø–æ–∫–æ–∏—Ç —á—Ç–æ-—Ç–æ –µ—â–µ?", callback_data=str(START_OVER))
        ],
        [
            InlineKeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –≤—Ä–∞—á—É –ø–µ–¥–∏–∞—Ç—Ä—É", callback_data=str(END))
        ],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        text="–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–∞ –ø–æ—Å—Ç—É—Ä–∞–ª—å–Ω–∞—è —Ç–µ—Ä–∞–ø–∏—è: \n–ö–æ—Ä–º–ª–µ–Ω–∏–µ —Ä–µ–±–µ–Ω–∫–∞ –ø–æ–¥ —É–≥–ª–æ–º 45-60 –≥—Ä–∞–¥—É—Å–æ–≤;\n"
             "–£–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Ä–µ–±–µ–Ω–∫–∞ –ø–æ—Å–ª–µ –∫–æ—Ä–º–ª–µ–Ω–∏—è –≤ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–º –ø–æ–ª–æ–∂–µ–Ω–∏–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 20-30 –º–∏–Ω—É—Ç;\n"
             "–°–ª–µ–¥–∏—Ç—å –∑–∞ —Ç–µ–º, —á—Ç–æ–±—ã –º–ª–∞–¥–µ–Ω–µ—Ü –∑–∞–≥–ª–∞—Ç—ã–≤–∞–ª —Å–æ—Å–æ–∫ –≤–º–µ—Å—Ç–µ —Å –∞—Ä–µ–æ–ª–æ–π –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∑–∞–≥–ª–∞—Ç—ã–≤–∞–Ω–∏—è –≤–æ–∑–¥—É—Ö–∞;\n"
             "–ü—Ä–∏ –∫–æ—Ä–º–ª–µ–Ω–∏–∏ –∏–∑ –±—É—Ç—ã–ª–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–ø–æ–ª–Ω—è—Ç—å —Å–æ—Å–∫—É;\n"
             "–°–ª–µ–¥–∏—Ç—å –∑–∞ —Ç–µ–º, —á—Ç–æ–±—ã –æ–¥–µ–∂–¥–∞ –Ω–µ —Å–¥–∞–≤–ª–∏–≤–∞–ª–∞ –∂–∏–≤–æ—Ç —Ä–µ–±–µ–Ω–∫–∞.",
        reply_markup=reply_markup
    )
    return SECOND


async def reg_end_2_1(update, _):
    dict_mongo[
        "–ö–∞–∫ —á–∞—Å—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Å—Ä—ã–≥–∏–≤–∞–Ω–∏–µ?"] = "1-2 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å"
    query = update.callback_query
    await query.answer()
    global recommendations
    recommendations += "–û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –≤—Ä–∞—á—É –ø–µ–¥–∏–∞—Ç—Ä—É\n" \
                       "–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–∞ –ø–æ—Å—Ç—É—Ä–∞–ª—å–Ω–∞—è —Ç–µ—Ä–∞–ø–∏—è: \n–ö–æ—Ä–º–ª–µ–Ω–∏–µ —Ä–µ–±–µ–Ω–∫–∞ –ø–æ–¥ —É–≥–ª–æ–º 45-60 –≥—Ä–∞–¥—É—Å–æ–≤;\n" \
                       "–£–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Ä–µ–±–µ–Ω–∫–∞ –ø–æ—Å–ª–µ –∫–æ—Ä–º–ª–µ–Ω–∏—è –≤ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–º –ø–æ–ª–æ–∂–µ–Ω–∏–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 20-30 –º–∏–Ω—É—Ç;\n" \
                       "–°–ª–µ–¥–∏—Ç—å –∑–∞ —Ç–µ–º, —á—Ç–æ–±—ã –º–ª–∞–¥–µ–Ω–µ—Ü –∑–∞–≥–ª–∞—Ç—ã–≤–∞–ª —Å–æ—Å–æ–∫ –≤–º–µ—Å—Ç–µ —Å –∞—Ä–µ–æ–ª–æ–π –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∑–∞–≥–ª–∞—Ç—ã–≤–∞–Ω–∏—è –≤–æ–∑–¥—É—Ö–∞;\n" \
                       "–ü—Ä–∏ –∫–æ—Ä–º–ª–µ–Ω–∏–∏ –∏–∑ –±—É—Ç—ã–ª–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–ø–æ–ª–Ω—è—Ç—å —Å–æ—Å–∫—É;\n" \
                       "–°–ª–µ–¥–∏—Ç—å –∑–∞ —Ç–µ–º, —á—Ç–æ–±—ã –æ–¥–µ–∂–¥–∞ –Ω–µ —Å–¥–∞–≤–ª–∏–≤–∞–ª–∞ –∂–∏–≤–æ—Ç —Ä–µ–±–µ–Ω–∫–∞.\n"
    keyboard = [
        [
            InlineKeyboardButton("–í–∞—à–µ–≥–æ —Ä–µ–±–µ–Ω–∫–∞ –±–µ—Å–ø–æ–∫–æ–∏—Ç —á—Ç–æ-—Ç–æ –µ—â–µ?", callback_data=str(START_OVER))
        ],
        [
            InlineKeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –≤—Ä–∞—á—É –ø–µ–¥–∏–∞—Ç—Ä—É", callback_data=str(END))
        ],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        text="<b>–û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –≤—Ä–∞—á—É –ø–µ–¥–∏–∞—Ç—Ä—É</b>\n"
             "–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–∞ –ø–æ—Å—Ç—É—Ä–∞–ª—å–Ω–∞—è —Ç–µ—Ä–∞–ø–∏—è: \n–ö–æ—Ä–º–ª–µ–Ω–∏–µ —Ä–µ–±–µ–Ω–∫–∞ –ø–æ–¥ —É–≥–ª–æ–º 45-60 –≥—Ä–∞–¥—É—Å–æ–≤;\n"
             "–£–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Ä–µ–±–µ–Ω–∫–∞ –ø–æ—Å–ª–µ –∫–æ—Ä–º–ª–µ–Ω–∏—è –≤ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–º –ø–æ–ª–æ–∂–µ–Ω–∏–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 20-30 –º–∏–Ω—É—Ç;\n"
             "–°–ª–µ–¥–∏—Ç—å –∑–∞ —Ç–µ–º, —á—Ç–æ–±—ã –º–ª–∞–¥–µ–Ω–µ—Ü –∑–∞–≥–ª–∞—Ç—ã–≤–∞–ª —Å–æ—Å–æ–∫ –≤–º–µ—Å—Ç–µ —Å –∞—Ä–µ–æ–ª–æ–π –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∑–∞–≥–ª–∞—Ç—ã–≤–∞–Ω–∏—è "
             "–≤–æ–∑–¥—É—Ö–∞;\n"
             "–ü—Ä–∏ –∫–æ—Ä–º–ª–µ–Ω–∏–∏ –∏–∑ –±—É—Ç—ã–ª–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–ø–æ–ª–Ω—è—Ç—å —Å–æ—Å–∫—É;\n"
             "–°–ª–µ–¥–∏—Ç—å –∑–∞ —Ç–µ–º, —á—Ç–æ–±—ã –æ–¥–µ–∂–¥–∞ –Ω–µ —Å–¥–∞–≤–ª–∏–≤–∞–ª–∞ –∂–∏–≤–æ—Ç —Ä–µ–±–µ–Ω–∫–∞.",
        parse_mode='HTML',
        reply_markup=reply_markup
    )
    return SECOND


async def reg_end_2_2(update, _):
    dict_mongo[
        "–ö–∞–∫ —á–∞—Å—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Å—Ä—ã–≥–∏–≤–∞–Ω–∏–µ?"] = "–ë–æ–ª—å—à–µ 3-—Ö —Ä–∞–∑ –≤ –¥–µ–Ω—å –∏–ª–∏ –∫–∞–∂–¥–æ–µ –≤—Å–∫–∞—Ä–º–ª–∏–≤–∞–Ω–∏–µ"
    query = update.callback_query
    await query.answer()
    global recommendations
    recommendations += "–û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –≤—Ä–∞—á—É –ø–µ–¥–∏–∞—Ç—Ä—É\n" \
                       "–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–∞ –ø–æ—Å—Ç—É—Ä–∞–ª—å–Ω–∞—è —Ç–µ—Ä–∞–ø–∏—è: \n–ö–æ—Ä–º–ª–µ–Ω–∏–µ —Ä–µ–±–µ–Ω–∫–∞ –ø–æ–¥ —É–≥–ª–æ–º 45-60 –≥—Ä–∞–¥—É—Å–æ–≤;\n" \
                       "–£–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Ä–µ–±–µ–Ω–∫–∞ –ø–æ—Å–ª–µ –∫–æ—Ä–º–ª–µ–Ω–∏—è –≤ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–º –ø–æ–ª–æ–∂–µ–Ω–∏–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 20-30 –º–∏–Ω—É—Ç;\n" \
                       "–°–ª–µ–¥–∏—Ç—å –∑–∞ —Ç–µ–º, —á—Ç–æ–±—ã –º–ª–∞–¥–µ–Ω–µ—Ü –∑–∞–≥–ª–∞—Ç—ã–≤–∞–ª —Å–æ—Å–æ–∫ –≤–º–µ—Å—Ç–µ —Å –∞—Ä–µ–æ–ª–æ–π –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∑–∞–≥–ª–∞—Ç—ã–≤–∞–Ω–∏—è –≤–æ–∑–¥—É—Ö–∞;\n" \
                       "–ü—Ä–∏ –∫–æ—Ä–º–ª–µ–Ω–∏–∏ –∏–∑ –±—É—Ç—ã–ª–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–ø–æ–ª–Ω—è—Ç—å —Å–æ—Å–∫—É;\n" \
                       "–°–ª–µ–¥–∏—Ç—å –∑–∞ —Ç–µ–º, —á—Ç–æ–±—ã –æ–¥–µ–∂–¥–∞ –Ω–µ —Å–¥–∞–≤–ª–∏–≤–∞–ª–∞ –∂–∏–≤–æ—Ç —Ä–µ–±–µ–Ω–∫–∞.\n"
    keyboard = [
        [
            InlineKeyboardButton("–í–∞—à–µ–≥–æ —Ä–µ–±–µ–Ω–∫–∞ –±–µ—Å–ø–æ–∫–æ–∏—Ç —á—Ç–æ-—Ç–æ –µ—â–µ?", callback_data=str(START_OVER))
        ],
        [
            InlineKeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –≤—Ä–∞—á—É –ø–µ–¥–∏–∞—Ç—Ä—É", callback_data=str(END))
        ],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        text="<b>–û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –≤—Ä–∞—á—É –ø–µ–¥–∏–∞—Ç—Ä—É</b>\n"
             "–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–∞ –ø–æ—Å—Ç—É—Ä–∞–ª—å–Ω–∞—è —Ç–µ—Ä–∞–ø–∏—è: \n–ö–æ—Ä–º–ª–µ–Ω–∏–µ —Ä–µ–±–µ–Ω–∫–∞ –ø–æ–¥ —É–≥–ª–æ–º 45-60 –≥—Ä–∞–¥—É—Å–æ–≤;\n"
             "–£–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Ä–µ–±–µ–Ω–∫–∞ –ø–æ—Å–ª–µ –∫–æ—Ä–º–ª–µ–Ω–∏—è –≤ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–º –ø–æ–ª–æ–∂–µ–Ω–∏–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 20-30 –º–∏–Ω—É—Ç;\n"
             "–°–ª–µ–¥–∏—Ç—å –∑–∞ —Ç–µ–º, —á—Ç–æ–±—ã –º–ª–∞–¥–µ–Ω–µ—Ü –∑–∞–≥–ª–∞—Ç—ã–≤–∞–ª —Å–æ—Å–æ–∫ –≤–º–µ—Å—Ç–µ —Å –∞—Ä–µ–æ–ª–æ–π –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∑–∞–≥–ª–∞—Ç—ã–≤–∞–Ω–∏—è "
             "–≤–æ–∑–¥—É—Ö–∞;\n"
             "–ü—Ä–∏ –∫–æ—Ä–º–ª–µ–Ω–∏–∏ –∏–∑ –±—É—Ç—ã–ª–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–ø–æ–ª–Ω—è—Ç—å —Å–æ—Å–∫—É;\n"
             "–°–ª–µ–¥–∏—Ç—å –∑–∞ —Ç–µ–º, —á—Ç–æ–±—ã –æ–¥–µ–∂–¥–∞ –Ω–µ —Å–¥–∞–≤–ª–∏–≤–∞–ª–∞ –∂–∏–≤–æ—Ç —Ä–µ–±–µ–Ω–∫–∞.",
        parse_mode='HTML',
        reply_markup=reply_markup
    )
    return SECOND


async def reg_end_3(update, _):
    dict_mongo[
        "–ö–∞–∫ —á–∞—Å—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Å—Ä—ã–≥–∏–≤–∞–Ω–∏–µ?"] = "–ë–æ–ª—å—à–µ 3-—Ö —Ä–∞–∑ –≤ –¥–µ–Ω—å –∏–ª–∏ –∫–∞–∂–¥–æ–µ –≤—Å–∫–∞—Ä–º–ª–∏–≤–∞–Ω–∏–µ"
    query = update.callback_query
    await query.answer()
    global recommendations
    recommendations += "–°—Ä–æ—á–Ω–æ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –≤—Ä–∞—á—É –ø–µ–¥–∏–∞—Ç—Ä—É\n" \
                       "–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–∞ –ø–æ—Å—Ç—É—Ä–∞–ª—å–Ω–∞—è —Ç–µ—Ä–∞–ø–∏—è: \n" \
                       "–ö–æ—Ä–º–ª–µ–Ω–∏–µ —Ä–µ–±–µ–Ω–∫–∞ –ø–æ–¥ —É–≥–ª–æ–º 45-60 –≥—Ä–∞–¥—É—Å–æ–≤;\n" \
                       "–£–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Ä–µ–±–µ–Ω–∫–∞ –ø–æ—Å–ª–µ –∫–æ—Ä–º–ª–µ–Ω–∏—è –≤ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–º –ø–æ–ª–æ–∂–µ–Ω–∏–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 20-30 –º–∏–Ω—É—Ç;\n" \
                       "–°–ª–µ–¥–∏—Ç—å –∑–∞ —Ç–µ–º, —á—Ç–æ–±—ã –º–ª–∞–¥–µ–Ω–µ—Ü –∑–∞–≥–ª–∞—Ç—ã–≤–∞–ª —Å–æ—Å–æ–∫ –≤–º–µ—Å—Ç–µ " \
                       "—Å –∞—Ä–µ–æ–ª–æ–π –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∑–∞–≥–ª–∞—Ç—ã–≤–∞–Ω–∏—è –≤–æ–∑–¥—É—Ö–∞;\n" \
                       "–ü—Ä–∏ –∫–æ—Ä–º–ª–µ–Ω–∏–∏ –∏–∑ –±—É—Ç—ã–ª–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–ø–æ–ª–Ω—è—Ç—å —Å–æ—Å–∫—É;\n" \
                       "–°–ª–µ–¥–∏—Ç—å –∑–∞ —Ç–µ–º, —á—Ç–æ–±—ã –æ–¥–µ–∂–¥–∞ –Ω–µ —Å–¥–∞–≤–ª–∏–≤–∞–ª–∞ –∂–∏–≤–æ—Ç —Ä–µ–±–µ–Ω–∫–∞.\n"
    keyboard = [
        [
            InlineKeyboardButton("–í–∞—à–µ–≥–æ —Ä–µ–±–µ–Ω–∫–∞ –±–µ—Å–ø–æ–∫–æ–∏—Ç —á—Ç–æ-—Ç–æ –µ—â–µ?", callback_data=str(START_OVER))
        ],
        [
            InlineKeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –≤—Ä–∞—á—É –ø–µ–¥–∏–∞—Ç—Ä—É", callback_data=str(END))
        ],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        text="–°—Ä–æ—á–Ω–æ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –≤—Ä–∞—á—É –ø–µ–¥–∏–∞—Ç—Ä—É.\n"
             "–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–∞ –ø–æ—Å—Ç—É—Ä–∞–ª—å–Ω–∞—è —Ç–µ—Ä–∞–ø–∏—è: \n–ö–æ—Ä–º–ª–µ–Ω–∏–µ —Ä–µ–±–µ–Ω–∫–∞ –ø–æ–¥ —É–≥–ª–æ–º 45-60 –≥—Ä–∞–¥—É—Å–æ–≤;\n"
             "–£–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Ä–µ–±–µ–Ω–∫–∞ –ø–æ—Å–ª–µ –∫–æ—Ä–º–ª–µ–Ω–∏—è –≤ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–º –ø–æ–ª–æ–∂–µ–Ω–∏–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 20-30 –º–∏–Ω—É—Ç;\n"
             "–°–ª–µ–¥–∏—Ç—å –∑–∞ —Ç–µ–º, —á—Ç–æ–±—ã –º–ª–∞–¥–µ–Ω–µ—Ü –∑–∞–≥–ª–∞—Ç—ã–≤–∞–ª —Å–æ—Å–æ–∫ –≤–º–µ—Å—Ç–µ —Å –∞—Ä–µ–æ–ª–æ–π –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∑–∞–≥–ª–∞—Ç—ã–≤–∞–Ω–∏—è –≤–æ–∑–¥—É—Ö–∞;\n"
             "–ü—Ä–∏ –∫–æ—Ä–º–ª–µ–Ω–∏–∏ –∏–∑ –±—É—Ç—ã–ª–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–ø–æ–ª–Ω—è—Ç—å —Å–æ—Å–∫—É;\n"
             "–°–ª–µ–¥–∏—Ç—å –∑–∞ —Ç–µ–º, —á—Ç–æ–±—ã –æ–¥–µ–∂–¥–∞ –Ω–µ —Å–¥–∞–≤–ª–∏–≤–∞–ª–∞ –∂–∏–≤–æ—Ç —Ä–µ–±–µ–Ω–∫–∞.",
        reply_markup=reply_markup
    )
    return SECOND


async def start_over(update, _):
    query = update.callback_query
    await query.answer()
    keyboard = [
        [
            InlineKeyboardButton("–°—Ä—ã–≥–∏–≤–∞–Ω–∏—è", callback_data=str(R_Q_1))
        ],
        [
            InlineKeyboardButton("–ö–æ–ª–∏–∫–∏", callback_data=str(C_Q_1))
        ],
        [
            InlineKeyboardButton("–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç—É–ª–∞: –∑–∞–¥–µ—Ä–∂–∫–∞ (–∑–∞–ø–æ—Ä—ã) –∏–ª–∏ —É—á–∞—â–µ–Ω–Ω—ã–π —Å—Ç—É–ª", callback_data=str(S_Q_1))
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        text="–ö–∞–∫–∏–µ –∂–∞–ª–æ–±—ã –±–µ—Å–ø–æ–∫–æ—è—Ç –í–∞—à–µ–≥–æ —Ä–µ–±–µ–Ω–∫–∞?", reply_markup=reply_markup
    )
    return FIRST


def clear(recommendations):
    list = recommendations.split('\n')
    str_1 = "–û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –≤—Ä–∞—á—É –ø–µ–¥–∏–∞—Ç—Ä—É"
    str_2 = "–°—Ä–æ—á–Ω–æ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –≤—Ä–∞—á—É –ø–µ–¥–∏–∞—Ç—Ä—É"
    if str_2 in list:
        while str_1 in list:
            list.remove(str_1)
        while '' in list:
            list.remove('')
        while str_2 in list:
            list.remove(str_2)
        new_rec = "\n<b>–°—Ä–æ—á–Ω–æ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –≤—Ä–∞—á—É –ø–µ–¥–∏–∞—Ç—Ä—É</b>.\n" + ('\n').join(list)
        return new_rec
    else:
        while str_1 in list:
            list.remove(str_1)
        while '' in list:
            list.remove('')
        new_rec = "\n<b>–û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –≤—Ä–∞—á—É –ø–µ–¥–∏–∞—Ç—Ä—É</b>.\n" + ('\n').join(list)
        return new_rec


async def end(update, _):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç `ConversationHandler.END`, –∫–æ—Ç–æ—Ä—ã–π –≥–æ–≤–æ—Ä–∏—Ç
    `ConversationHandler` —á—Ç–æ —Ä–∞–∑–≥–æ–≤–æ—Ä –æ–∫–æ–Ω—á–µ–Ω"""
    user = search_or_save_user(mdb, update.effective_user)
    opros = save_user_opros(mdb, user, dict_mongo,dict_anketa)
    user = search_or_save_user(mdb, update.effective_user)
    df = pd.DataFrame.from_dict(user, orient='index').rename(columns={0: 'answer'})
    df.to_csv('diff.csv')
    clear_iloc2()
    send_mail()
    # for csvfile in glob.glob(os.path.join('.', '*.csv')):
    #   workbook = Workbook(csvfile[:-4] + '.xlsx')
    #  worksheet = workbook.add_worksheet()
    # with open('diff.csv', 'rt', encoding='utf8') as f:
    #    reader = csv.reader(f)
    #   for r, row in enumerate(reader):
    #      for c, col in enumerate(row):
    #         worksheet.write(r, c, col)
    # workbook.close()

    query = update.callback_query
    await query.answer()
    await query.edit_message_text(text=f"–°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –Ω–∞—à–µ–≥–æ –æ–ø—Ä–æ—Å–∞!\n"
                                       f"–ù–∞—à–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n"
                                       f" {clear(recommendations)}", parse_mode='HTML')
    return ConversationHandler.END


filename = ""


def clear_iloc(df, newdf, count):
    loc = df['data'].iloc[count].replace("'", '')
    loc = loc[1:-1].split(',')
    list1 = []
    flag = True
    global filename

    for elem in loc:
        list1.append(elem.split(':'))

    for elem in list1:
        if count == 0 and flag:
            flag = False
            ru_text = elem[1].strip()
            filename = translit(ru_text, language_code='ru', reversed=True)
        newdf.loc[elem[0].strip()] = [elem[1]]
    return newdf


def clear_iloc2():
    df = pd.DataFrame(columns=['name', 'data'])
    newdf = pd.DataFrame(columns=['data'])
    global filename
    with open("diff.csv", encoding='utf-8') as r_file:
        file_reader = csv.reader(r_file, delimiter=",")
        count = 0
        for row in file_reader:
            if count > 3:
                df.loc[count - 3] = row
            count += 1
    for i in range(4):
        clear_iloc(df, newdf, i)
    with pd.ExcelWriter(f'{filename}.xlsx') as writer:
        newdf.to_excel(writer, sheet_name="MySheet")
        sheet = writer.sheets['MySheet']
        sheet.autofit()


def send_mail():
    subject = "–ü–∏—Å—å–º–æ —Å Excel –≤–ª–æ–∂–µ–Ω–∏–µ–º –∏–∑ Python"
    body = "–≠—Ç–æ –ø–∏—Å—å–º–æ –∏–∑ Python —Å –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–º —Ñ–∞–π–ª–æ–º."
    sender_email = "anshlag338@gmail.com"
    receiver_email = "maksizkzkz03@gmail.com"
    password = 'ltzhxjwfxhvzizfz'

    # –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ—Å—Ç–∞–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞
    message = MIMEMultipart()
    message["From"] = sender_email
    message["To"] = receiver_email
    message["Subject"] = subject

    # –í–Ω–µ—Å–µ–Ω–∏–µ —Ç–µ–ª–∞ –ø–∏—Å—å–º–∞
    message.attach(MIMEText(body, "plain"))

    global filename
    filename = f"{filename}.xlsx"  # –í —Ç–æ–π –∂–µ –ø–∞–ø–∫–µ —á—Ç–æ –∏ –∫–æ–¥

    # –û—Ç–∫—Ä—ã—Ç–∏–µ PDF —Ñ–∞–π–ª–∞ –≤ –±–∏–Ω–∞—Ä–Ω–æ–º —Ä–µ–∂–∏–º–µ
    with open(filename, "rb") as attachment:
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–∏—Å—å–º–∞ application/octet-stream
        # –ü–æ—á—Ç–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç –æ–±—ã—á–Ω–æ –º–æ–∂–µ—Ç –∑–∞–≥—Ä—É–∑–∏—Ç—å —ç—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ –≤–∏–¥–µ –≤–ª–æ–∂–µ–Ω–∏—è
        part = MIMEBase("application", "octet-stream")
        part.set_payload(attachment.read())

    # –®–∏—Ñ—Ä–æ–≤–∫–∞ —Ñ–∞–π–ª–∞ –ø–æ–¥ ASCII —Å–∏–º–≤–æ–ª—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ –ø–æ—á—Ç–µ
    encoders.encode_base64(part)

    # –í–Ω–µ—Å–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –≤ –≤–∏–¥–µ –ø–∞—Ä–∞/–∫–ª—é—á –∫ —á–∞—Å—Ç–∏ –≤–ª–æ–∂–µ–Ω–∏—è
    part.add_header(
        "Content-Disposition",
        f"attachment; filename= {filename}",
    )

    # –í–Ω–µ—Å–µ–Ω–∏–µ –≤–ª–æ–∂–µ–Ω–∏—è –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å—Ç—Ä–æ–∫—É
    message.attach(part)
    text = message.as_string()

    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É –ø—Ä–∏ –ø–æ–º–æ—â–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–∏—Å—å–º–∞
    context = ssl.create_default_context()
    with smtplib.SMTP_SSL("smtp.gmail.com", 465, context=context) as server:
        server.login(sender_email, password)
        server.sendmail(sender_email, receiver_email, text)


def question_number(num):
    num = int(num)
    key = max(dict_query)
    key = int(key)
    dict_query[key + 1] = num
    return key


def search_or_save_user(mdb, effective_user):
    user = mdb.users.find_one({"user_id": effective_user.id})
    if not user:
        user = {
            "user_id": effective_user.id,
            "username": effective_user.username,
        }
        mdb.users.insert_one(user)
    return user


def save_user_anketa(mdb, user):
    mdb.users.update_one(
        {'_id': user['_id']},
        {'$set': {'anketa': {'–§–ò–û': None,
                             '–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞': None,
                             '–§–ò–û —Ä–µ–±–µ–Ω–∫–∞': None,
                             '–í–æ–∑—Ä–∞—Å—Ç —Ä–µ–±–µ–Ω–∫–∞ –≤ –º–µ—Å—è—Ü–∞—Ö': None}}
         }
    )
    mdb.users.update_one(
        {'_id': user['_id']},
        {'$set': {'–°—Ä—ã–≥–∏–≤–∞–Ω–∏—è': {'–í —Ç–µ—á–µ–Ω–∏–µ –∫–∞–∫–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—Ä—ã–≥–∏–≤–∞–Ω–∏—è –±–µ—Å–ø–æ–∫–æ—è—Ç –í–∞—à–µ–≥–æ —Ä–µ–±–µ–Ω–∫–∞?': None,
                                 '–ö–∞–∫–æ–π –æ–±—ä–µ–º –æ–¥–Ω–æ–≥–æ —Å—Ä—ã–≥–∏–≤–∞–Ω–∏—è?': None,
                                 '–ö–∞–∫–æ–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Å—Ä—ã–≥–∏–≤–∞–Ω–∏—è?': None,
                                 '–ï—Å—Ç—å –ª–∏ —É –í–∞—à–µ–≥–æ —Ä–µ–±–µ–Ω–∫–∞ –æ–¥–Ω–∞ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–∑ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω—ã—Ö –∂–∞–ª–æ–±- —Å–Ω–∏–∂–µ–Ω–∏–µ –º–∞—Å—Å—ã —Ç–µ–ª–∞; —Ä–≤–æ—Ç–∞ —Ñ–æ–Ω—Ç–∞–Ω–æ–º; —Ä–≤–æ—Ç–∞ —Å –ø—Ä–∏–º–µ—Å—å—é –∫—Ä–æ–≤–∏ –∏–ª–∏ –∂–µ–ª—á–∏?': None,
                                 '–ß–µ—Ä–µ–∑ –∫–∞–∫–æ–µ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ –∫–æ—Ä–º–ª–µ–Ω–∏—è –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Å—Ä—ã–≥–∏–≤–∞–Ω–∏–µ?': None,
                                 '–ö–∞–∫ —á–∞—Å—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Å—Ä—ã–≥–∏–≤–∞–Ω–∏–µ?': None}}
         }
    )
    mdb.users.update_one(
        {'_id': user['_id']},
        {'$set': {'–ö–æ–ª–∏–∫–∏': {'–ö–∞–∫ —á–∞—Å—Ç–æ –í–∞—à–µ–≥–æ —Ä–µ–±–µ–Ω–∫–∞ –±–µ—Å–ø–æ–∫–æ—è—Ç –∫–æ–ª–∏–∫–∏?': None,
                             '–í —Ç–µ—á–µ–Ω–∏–µ –∫–∞–∫–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –í–∞—à–µ–≥–æ —Ä–µ–±–µ–Ω–∫–∞ –±–µ—Å–ø–æ–∫–æ—è—Ç –∫–æ–ª–∏–∫–∏?': None,
                             '–í –∫–∞–∫–æ–µ –≤—Ä–µ–º—è —Å—É—Ç–æ–∫ –±–µ—Å–ø–æ–∫–æ—è—Ç –∫–æ–ª–∏–∫–∏?': None,
                             '–ï—Å—Ç—å –ª–∏ —Å–≤—è–∑—å –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è –∫–æ–ª–∏–∫ —Å –ø—Ä–∏–µ–º–æ–º –ø–∏—â–∏?': None,
                             '–ü—Ä–æ—Ö–æ–¥—è—Ç –ª–∏ –∫–æ–ª–∏–∫–∏ –ø–æ—Å–ª–µ —Å—Ç—É–ª–∞?': None,
                             '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–¥–Ω–æ–≥–æ —ç–ø–∏–∑–æ–¥–∞ –∫–æ–ª–∏–∫?': None,
                             '–ù–∞ –∫–∞–∫–æ–º –≤—Å–∫–∞—Ä–º–ª–∏–≤–∞–Ω–∏–∏ –í–∞—à —Ä–µ–±–µ–Ω–æ–∫?': None,
                             '–ï—Å—Ç—å –ª–∏ —É –í–∞—à–µ–≥–æ —Ä–µ–±–µ–Ω–∫–∞ –æ–¥–Ω–∞ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–∑ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω—ã—Ö –∂–∞–ª–æ–±- –£–ø–æ—Ä–Ω—ã–π –∫—Ä–∏–∫ —Å –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏; –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ —Ä–≤–æ—Ç—ã; —Ä–≤–æ—Ç–∞ —Å –∫—Ä–æ–≤—å—é; –∫—Ä–æ–≤—å –≤ —Å—Ç—É–ª–µ; –ø–æ—Ç–µ—Ä—è –º–∞—Å—Å—ã —Ç–µ–ª–∞; –∑–∞–¥–µ—Ä–∂–∫–∞ —Ä–æ—Å—Ç–∞; –ª–∏—Ö–æ—Ä–∞–¥–∫–∞ (–ø–æ–≤—ã—à–µ–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã)?': None}}
         }
    )
    mdb.users.update_one(
        {'_id': user['_id']},
        {'$set': {'–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç—É–ª-–∑–∞–¥–µ—Ä–∂–∫–∞ (–∑–∞–ø–æ—Ä—ã) –∏–ª–∏ —É—á–∞—â–µ–Ω–Ω—ã–π —Å—Ç—É–ª':
                      {'–ó–∞ –ø—Ä–æ—à–µ–¥—à–∏–π –º–µ—Å—è—Ü –≤ —Å—Ä–µ–¥–Ω–µ–º —Å–∫–æ–ª—å–∫–æ –¥–µ—Ñ–µ–∫–∞—Ü–∏–π –≤ –Ω–µ–¥–µ–ª—é –±—ã–ª–æ —É –í–∞—à–µ–≥–æ —Ä–µ–±–µ–Ω–∫–∞?': None,
                       '–ï—Å—Ç—å –ª–∏ —É –í–∞—à–µ–≥–æ —Ä–µ–±–µ–Ω–∫–∞ –æ–¥–Ω–∞ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–∑ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω—ã—Ö –∂–∞–ª–æ–±- —Å—É—Ö–æ—Å—Ç—å –∫–æ–∂–∏ –∏ —Å–ª–∏–∑–∏—Å—Ç—ã—Ö; —Ä–µ–¥–∫–æ–µ –º–æ—á–µ–∏—Å–ø—É—Å–∫–∞–Ω–∏–µ; —è–∑—ã–∫ –æ–±–ª–æ–∂–µ–Ω –±–µ–ª—ã–º –Ω–∞–ª–µ—Ç–æ–º; —Å–ª–∞–±–æ—Å—Ç—å –∏ —Å–æ–Ω–ª–∏–≤–æ—Å—Ç—å; –∑–∞–ø–∞–¥–µ–Ω–∏–µ —Ä–æ–¥–Ω–∏—á–∫–∞?': None,
                       '–ù–∞ –∫–∞–∫–æ–º –≤—Å–∫–∞—Ä–º–ª–∏–≤–∞–Ω–∏–∏ –í–∞—à —Ä–µ–±–µ–Ω–æ–∫?': None,
                       '–í —Ç–µ—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –º–µ—Å—è—Ü–∞ –í–∞—à —Ä–µ–±–µ–Ω–æ–∫ —Å–∏–ª—å–Ω–æ —Ç—É–∂–∏–ª—Å—è –≤–æ –≤—Ä–µ–º—è –¥–µ—Ñ–µ–∫–∞—Ü–∏–∏?': None,
                       '–ö–∞–∫–æ–π –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ü–∏–∏ –±—ã–ª —Å—Ç—É–ª —É –í–∞—à —Ä–µ–±–µ–Ω–æ–∫ –∑–∞ –ø—Ä–æ—à–µ–¥—à–∏–π –º–µ—Å—è—Ü?': None}}
         }
    )
    return user


def save_user_bd(mdb, user, x, y, z):
    mdb.users.update_one(
        {'_id': user['_id']},
        {'$set': {x: {y: z}
                  }}
    )
    return user

def save_user_opros(mdb, user, dict , dict_anketa):
    mdb.users.update_one(
        {'_id': user['_id']},
        {'$set': {'anketa': {'–§–ò–û': dict_anketa['–í–∞—à–µ –§–ò–û'],
                             '–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞': dict_anketa['–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞'],
                             '–§–ò–û —Ä–µ–±–µ–Ω–∫–∞': dict_anketa['–§–ò–û —Ä–µ–±–µ–Ω–∫–∞'],
                             '–í–æ–∑—Ä–∞—Å—Ç —Ä–µ–±–µ–Ω–∫–∞ –≤ –º–µ—Å—è—Ü–∞—Ö': dict_anketa['–í–æ–∑—Ä–∞—Å—Ç —Ä–µ–±–µ–Ω–∫–∞ –≤ –º–µ—Å—è—Ü–∞—Ö']}}
         }
    )
    mdb.users.update_one(
        {'_id': user['_id']},
        {'$set': {'–°—Ä—ã–≥–∏–≤–∞–Ω–∏—è': {'–í —Ç–µ—á–µ–Ω–∏–µ –∫–∞–∫–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—Ä—ã–≥–∏–≤–∞–Ω–∏—è –±–µ—Å–ø–æ–∫–æ—è—Ç –í–∞—à–µ–≥–æ —Ä–µ–±–µ–Ω–∫–∞?': dict[
            '–í —Ç–µ—á–µ–Ω–∏–µ –∫–∞–∫–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—Ä—ã–≥–∏–≤–∞–Ω–∏—è –±–µ—Å–ø–æ–∫–æ—è—Ç –í–∞—à–µ–≥–æ —Ä–µ–±–µ–Ω–∫–∞?'],
                                 '–ö–∞–∫–æ–π –æ–±—ä–µ–º –æ–¥–Ω–æ–≥–æ —Å—Ä—ã–≥–∏–≤–∞–Ω–∏—è?': dict['–ö–∞–∫–æ–π –æ–±—ä–µ–º –æ–¥–Ω–æ–≥–æ —Å—Ä—ã–≥–∏–≤–∞–Ω–∏—è?'],
                                 '–ö–∞–∫–æ–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Å—Ä—ã–≥–∏–≤–∞–Ω–∏—è?': dict[
                                     '–ö–∞–∫–æ–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Å—Ä—ã–≥–∏–≤–∞–Ω–∏—è?'],
                                 '–ï—Å—Ç—å –ª–∏ —É –í–∞—à–µ–≥–æ —Ä–µ–±–µ–Ω–∫–∞ –æ–¥–Ω–∞ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–∑ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω—ã—Ö –∂–∞–ª–æ–±- —Å–Ω–∏–∂–µ–Ω–∏–µ –º–∞—Å—Å—ã —Ç–µ–ª–∞; —Ä–≤–æ—Ç–∞ —Ñ–æ–Ω—Ç–∞–Ω–æ–º; —Ä–≤–æ—Ç–∞ —Å –ø—Ä–∏–º–µ—Å—å—é –∫—Ä–æ–≤–∏ –∏–ª–∏ –∂–µ–ª—á–∏?':
                                     dict[
                                         '–ï—Å—Ç—å –ª–∏ —É –í–∞—à–µ–≥–æ —Ä–µ–±–µ–Ω–∫–∞ –æ–¥–Ω–∞ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–∑ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω—ã—Ö –∂–∞–ª–æ–±- —Å–Ω–∏–∂–µ–Ω–∏–µ –º–∞—Å—Å—ã —Ç–µ–ª–∞; —Ä–≤–æ—Ç–∞ —Ñ–æ–Ω—Ç–∞–Ω–æ–º; —Ä–≤–æ—Ç–∞ —Å –ø—Ä–∏–º–µ—Å—å—é –∫—Ä–æ–≤–∏ –∏–ª–∏ –∂–µ–ª—á–∏?'],
                                 '–ß–µ—Ä–µ–∑ –∫–∞–∫–æ–µ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ –∫–æ—Ä–º–ª–µ–Ω–∏—è –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Å—Ä—ã–≥–∏–≤–∞–Ω–∏–µ?': dict[
                                     '–ß–µ—Ä–µ–∑ –∫–∞–∫–æ–µ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ –∫–æ—Ä–º–ª–µ–Ω–∏—è –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Å—Ä—ã–≥–∏–≤–∞–Ω–∏–µ?'],
                                 '–ö–∞–∫ —á–∞—Å—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Å—Ä—ã–≥–∏–≤–∞–Ω–∏–µ?': dict['–ö–∞–∫ —á–∞—Å—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Å—Ä—ã–≥–∏–≤–∞–Ω–∏–µ?']}}
         }
    )
    mdb.users.update_one(
        {'_id': user['_id']},
        {'$set': {
            '–ö–æ–ª–∏–∫–∏': {'–ö–∞–∫ —á–∞—Å—Ç–æ –í–∞—à–µ–≥–æ —Ä–µ–±–µ–Ω–∫–∞ –±–µ—Å–ø–æ–∫–æ—è—Ç –∫–æ–ª–∏–∫–∏?': dict['–ö–∞–∫ —á–∞—Å—Ç–æ –í–∞—à–µ–≥–æ —Ä–µ–±–µ–Ω–∫–∞ –±–µ—Å–ø–æ–∫–æ—è—Ç –∫–æ–ª–∏–∫–∏?'],
                       '–í —Ç–µ—á–µ–Ω–∏–µ –∫–∞–∫–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –í–∞—à–µ–≥–æ —Ä–µ–±–µ–Ω–∫–∞ –±–µ—Å–ø–æ–∫–æ—è—Ç –∫–æ–ª–∏–∫–∏?': dict[
                           '–í —Ç–µ—á–µ–Ω–∏–µ –∫–∞–∫–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –í–∞—à–µ–≥–æ —Ä–µ–±–µ–Ω–∫–∞ –±–µ—Å–ø–æ–∫–æ—è—Ç –∫–æ–ª–∏–∫–∏?'],
                       '–í –∫–∞–∫–æ–µ –≤—Ä–µ–º—è —Å—É—Ç–æ–∫ –±–µ—Å–ø–æ–∫–æ—è—Ç –∫–æ–ª–∏–∫–∏?': dict['–í –∫–∞–∫–æ–µ –≤—Ä–µ–º—è —Å—É—Ç–æ–∫ –±–µ—Å–ø–æ–∫–æ—è—Ç –∫–æ–ª–∏–∫–∏?'],
                       '–ï—Å—Ç—å –ª–∏ —Å–≤—è–∑—å –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è –∫–æ–ª–∏–∫ —Å –ø—Ä–∏–µ–º–æ–º –ø–∏—â–∏?': dict[
                           '–ï—Å—Ç—å –ª–∏ —Å–≤—è–∑—å –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è –∫–æ–ª–∏–∫ —Å –ø—Ä–∏–µ–º–æ–º –ø–∏—â–∏?'],
                       '–ü—Ä–æ—Ö–æ–¥—è—Ç –ª–∏ –∫–æ–ª–∏–∫–∏ –ø–æ—Å–ª–µ —Å—Ç—É–ª–∞?': dict['–ü—Ä–æ—Ö–æ–¥—è—Ç –ª–∏ –∫–æ–ª–∏–∫–∏ –ø–æ—Å–ª–µ —Å—Ç—É–ª–∞?'],
                       '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–¥–Ω–æ–≥–æ —ç–ø–∏–∑–æ–¥–∞ –∫–æ–ª–∏–∫?': dict['–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–¥–Ω–æ–≥–æ —ç–ø–∏–∑–æ–¥–∞ –∫–æ–ª–∏–∫?'],
                       '–ù–∞ –∫–∞–∫–æ–º –≤—Å–∫–∞—Ä–º–ª–∏–≤–∞–Ω–∏–∏ –í–∞—à —Ä–µ–±–µ–Ω–æ–∫?': dict['–ù–∞ –∫–∞–∫–æ–º –≤—Å–∫–∞—Ä–º–ª–∏–≤–∞–Ω–∏–∏ –í–∞—à —Ä–µ–±–µ–Ω–æ–∫?'],
                       '–ï—Å—Ç—å –ª–∏ —É –í–∞—à–µ–≥–æ —Ä–µ–±–µ–Ω–∫–∞ –æ–¥–Ω–∞ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–∑ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω—ã—Ö –∂–∞–ª–æ–±- –£–ø–æ—Ä–Ω—ã–π –∫—Ä–∏–∫ —Å –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏; –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ —Ä–≤–æ—Ç—ã; —Ä–≤–æ—Ç–∞ —Å –∫—Ä–æ–≤—å—é; –∫—Ä–æ–≤—å –≤ —Å—Ç—É–ª–µ; –ø–æ—Ç–µ—Ä—è –º–∞—Å—Å—ã —Ç–µ–ª–∞; –∑–∞–¥–µ—Ä–∂–∫–∞ —Ä–æ—Å—Ç–∞; –ª–∏—Ö–æ—Ä–∞–¥–∫–∞ (–ø–æ–≤—ã—à–µ–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã)?':
                           dict[
                               '–ï—Å—Ç—å –ª–∏ —É –í–∞—à–µ–≥–æ —Ä–µ–±–µ–Ω–∫–∞ –æ–¥–Ω–∞ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–∑ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω—ã—Ö –∂–∞–ª–æ–±- –£–ø–æ—Ä–Ω—ã–π –∫—Ä–∏–∫ —Å –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏; –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ —Ä–≤–æ—Ç—ã; —Ä–≤–æ—Ç–∞ —Å –∫—Ä–æ–≤—å—é; –∫—Ä–æ–≤—å –≤ —Å—Ç—É–ª–µ; –ø–æ—Ç–µ—Ä—è –º–∞—Å—Å—ã —Ç–µ–ª–∞; –∑–∞–¥–µ—Ä–∂–∫–∞ —Ä–æ—Å—Ç–∞; –ª–∏—Ö–æ—Ä–∞–¥–∫–∞ (–ø–æ–≤—ã—à–µ–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã)?']}}
         }
    )
    mdb.users.update_one(
        {'_id': user['_id']},
        {'$set': {'–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç—É–ª-–∑–∞–¥–µ—Ä–∂–∫–∞ (–∑–∞–ø–æ—Ä—ã) –∏–ª–∏ —É—á–∞—â–µ–Ω–Ω—ã–π —Å—Ç—É–ª':
                      {'–ó–∞ –ø—Ä–æ—à–µ–¥—à–∏–π –º–µ—Å—è—Ü –≤ —Å—Ä–µ–¥–Ω–µ–º —Å–∫–æ–ª—å–∫–æ –¥–µ—Ñ–µ–∫–∞—Ü–∏–π –≤ –Ω–µ–¥–µ–ª—é –±—ã–ª–æ —É –í–∞—à–µ–≥–æ —Ä–µ–±–µ–Ω–∫–∞?': dict[
                          '–ó–∞ –ø—Ä–æ—à–µ–¥—à–∏–π –º–µ—Å—è—Ü –≤ —Å—Ä–µ–¥–Ω–µ–º —Å–∫–æ–ª—å–∫–æ –¥–µ—Ñ–µ–∫–∞—Ü–∏–π –≤ –Ω–µ–¥–µ–ª—é –±—ã–ª–æ —É –í–∞—à–µ–≥–æ —Ä–µ–±–µ–Ω–∫–∞?'],
                       '–ï—Å—Ç—å –ª–∏ —É –í–∞—à–µ–≥–æ —Ä–µ–±–µ–Ω–∫–∞ –æ–¥–Ω–∞ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–∑ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω—ã—Ö –∂–∞–ª–æ–±- —Å—É—Ö–æ—Å—Ç—å –∫–æ–∂–∏ –∏ —Å–ª–∏–∑–∏—Å—Ç—ã—Ö; —Ä–µ–¥–∫–æ–µ –º–æ—á–µ–∏—Å–ø—É—Å–∫–∞–Ω–∏–µ; —è–∑—ã–∫ –æ–±–ª–æ–∂–µ–Ω –±–µ–ª—ã–º –Ω–∞–ª–µ—Ç–æ–º; —Å–ª–∞–±–æ—Å—Ç—å –∏ —Å–æ–Ω–ª–∏–≤–æ—Å—Ç—å; –∑–∞–ø–∞–¥–µ–Ω–∏–µ —Ä–æ–¥–Ω–∏—á–∫–∞?':
                           dict[
                               '–ï—Å—Ç—å –ª–∏ —É –í–∞—à–µ–≥–æ —Ä–µ–±–µ–Ω–∫–∞ –æ–¥–Ω–∞ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–∑ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω—ã—Ö –∂–∞–ª–æ–±- —Å—É—Ö–æ—Å—Ç—å –∫–æ–∂–∏ –∏ —Å–ª–∏–∑–∏—Å—Ç—ã—Ö; —Ä–µ–¥–∫–æ–µ –º–æ—á–µ–∏—Å–ø—É—Å–∫–∞–Ω–∏–µ; —è–∑—ã–∫ –æ–±–ª–æ–∂–µ–Ω –±–µ–ª—ã–º –Ω–∞–ª–µ—Ç–æ–º; —Å–ª–∞–±–æ—Å—Ç—å –∏ —Å–æ–Ω–ª–∏–≤–æ—Å—Ç—å; –∑–∞–ø–∞–¥–µ–Ω–∏–µ —Ä–æ–¥–Ω–∏—á–∫–∞?'],
                       '–ù–∞ –∫–∞–∫–æ–º –≤—Å–∫–∞—Ä–º–ª–∏–≤–∞–Ω–∏–∏ –í–∞—à —Ä–µ–±–µ–Ω–æ–∫?': dict['–ù–∞ –∫–∞–∫–æ–º –≤—Å–∫–∞—Ä–º–ª–∏–≤–∞–Ω–∏–∏ –í–∞—à —Ä–µ–±–µ–Ω–æ–∫?'],
                       '–í —Ç–µ—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –º–µ—Å—è—Ü–∞ –í–∞—à —Ä–µ–±–µ–Ω–æ–∫ —Å–∏–ª—å–Ω–æ —Ç—É–∂–∏–ª—Å—è –≤–æ –≤—Ä–µ–º—è –¥–µ—Ñ–µ–∫–∞—Ü–∏–∏?': dict[
                           '–í —Ç–µ—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –º–µ—Å—è—Ü–∞ –í–∞—à —Ä–µ–±–µ–Ω–æ–∫ —Å–∏–ª—å–Ω–æ —Ç—É–∂–∏–ª—Å—è –≤–æ –≤—Ä–µ–º—è –¥–µ—Ñ–µ–∫–∞—Ü–∏–∏?'],
                       '–ö–∞–∫–æ–π –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ü–∏–∏ –±—ã–ª —Å—Ç—É–ª —É –í–∞—à —Ä–µ–±–µ–Ω–æ–∫ –∑–∞ –ø—Ä–æ—à–µ–¥—à–∏–π –º–µ—Å—è—Ü?': dict[
                           '–ö–∞–∫–æ–π –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ü–∏–∏ –±—ã–ª —Å—Ç—É–ª —É –í–∞—à —Ä–µ–±–µ–Ω–æ–∫ –∑–∞ –ø—Ä–æ—à–µ–¥—à–∏–π –º–µ—Å—è—Ü?']}}
         }
    )
    return user


if __name__ == '__main__':
    app = Application.builder().token("6018288883:AAE1Yae2qiajlfmGhr91Fjw0016rFwupxJg").build()

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤ —Å —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏ `FIRST` –∏ `SECOND`
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä `pattern` –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ `CallbackQueries` —Å
    # –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º —à–∞–±–ª–æ–Ω–æ–º –¥–∞–Ω–Ω—ã—Ö —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º
    # ^ - –æ–∑–Ω–∞—á–∞–µ—Ç "–Ω–∞—á–∞–ª–æ —Å—Ç—Ä–æ–∫–∏"
    # $ - –æ–∑–Ω–∞—á–∞–µ—Ç "–∫–æ–Ω–µ—Ü —Å—Ç—Ä–æ–∫–∏"
    # –¢–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, –ø–∞—Ç—Ç–µ—Ä–Ω `^ABC$` –±—É–¥–µ—Ç –ª–æ–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ 'ABC'
    conv_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("–î–∞–ª–µ–µ"), firstQue)],
        states={  # —Å–ª–æ–≤–∞—Ä—å —Å–æ—Å—Ç–æ—è–Ω–∏–π —Ä–∞–∑–≥–æ–≤–æ—Ä–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã—Ö callback —Ñ—É–Ω–∫—Ü–∏—è–º–∏
            FIRST: [
                # CallbackQueryHandler(main_q, pattern='^' + str(MAIN) + '$'),
                CallbackQueryHandler(colic_q_1, pattern='^' + str(C_Q_1) + '$'),
                CallbackQueryHandler(colic_q_2_1, pattern='^' + str(C_Q_2_1) + '$'),
                CallbackQueryHandler(colic_q_2_2, pattern='^' + str(C_Q_2_2) + '$'),

                CallbackQueryHandler(colic_q_3_1, pattern='^' + str(C_Q_3_1) + '$'),
                CallbackQueryHandler(colic_q_3_2, pattern='^' + str(C_Q_3_2) + '$'),
                CallbackQueryHandler(colic_q_3_3, pattern='^' + str(C_Q_3_3) + '$'),

                CallbackQueryHandler(colic_q_4_1, pattern='^' + str(C_Q_4_1) + '$'),
                CallbackQueryHandler(colic_q_4_2, pattern='^' + str(C_Q_4_2) + '$'),
                CallbackQueryHandler(colic_q_4_3, pattern='^' + str(C_Q_4_3) + '$'),
                CallbackQueryHandler(colic_q_4_4, pattern='^' + str(C_Q_4_4) + '$'),

                CallbackQueryHandler(colic_q_5_1, pattern='^' + str(C_Q_5_1) + '$'),
                CallbackQueryHandler(colic_q_5_2, pattern='^' + str(C_Q_5_2) + '$'),

                CallbackQueryHandler(colic_q_6_1, pattern='^' + str(C_Q_6_1) + '$'),
                CallbackQueryHandler(colic_q_6_2, pattern='^' + str(C_Q_6_2) + '$'),

                CallbackQueryHandler(colic_q_7_1, pattern='^' + str(C_Q_7_1) + '$'),
                CallbackQueryHandler(colic_q_7_2, pattern='^' + str(C_Q_7_2) + '$'),

                CallbackQueryHandler(colic_q_8_1, pattern='^' + str(C_Q_8_1) + '$'),
                CallbackQueryHandler(colic_q_8_2, pattern='^' + str(C_Q_8_2) + '$'),
                CallbackQueryHandler(colic_end_1, pattern='^' + str(C_E_1) + '$'),
                CallbackQueryHandler(colic_end_2, pattern='^' + str(C_E_2) + '$'),
                CallbackQueryHandler(colic_end_3, pattern='^' + str(C_E_3) + '$'),
                CallbackQueryHandler(stool_q_1, pattern='^' + str(S_Q_1) + '$'),

                CallbackQueryHandler(stool_q_2_1, pattern='^' + str(S_Q_2_1) + '$'),
                CallbackQueryHandler(stool_q_2_2, pattern='^' + str(S_Q_2_2) + '$'),
                CallbackQueryHandler(stool_q_2_3, pattern='^' + str(S_Q_2_3) + '$'),
                CallbackQueryHandler(stool_q_2_4, pattern='^' + str(S_Q_2_4) + '$'),

                CallbackQueryHandler(stool_q_3_1, pattern='^' + str(S_Q_3_1) + '$'),
                CallbackQueryHandler(stool_q_3_2, pattern='^' + str(S_Q_3_2) + '$'),

                CallbackQueryHandler(stool_q_4_1, pattern='^' + str(S_Q_4_1) + '$'),
                CallbackQueryHandler(stool_q_4_2, pattern='^' + str(S_Q_4_2) + '$'),
                CallbackQueryHandler(stool_q_4_3, pattern='^' + str(S_Q_4_3) + '$'),
                CallbackQueryHandler(stool_q_4_4, pattern='^' + str(S_Q_4_4) + '$'),

                CallbackQueryHandler(stool_q_5_1_1, pattern='^' + str(S_Q_5_1_1) + '$'),
                CallbackQueryHandler(stool_q_5_1_2, pattern='^' + str(S_Q_5_1_2) + '$'),

                CallbackQueryHandler(stool_q_5_2_1, pattern='^' + str(S_Q_5_2_1) + '$'),
                CallbackQueryHandler(stool_q_5_2_2, pattern='^' + str(S_Q_5_2_2) + '$'),

                CallbackQueryHandler(stool_q_5_3_1, pattern='^' + str(S_Q_5_3_1) + '$'),
                CallbackQueryHandler(stool_q_5_3_2, pattern='^' + str(S_Q_5_3_2) + '$'),

                CallbackQueryHandler(stool_q_5_4_1, pattern='^' + str(S_Q_5_4_1) + '$'),
                CallbackQueryHandler(stool_q_5_4_2, pattern='^' + str(S_Q_5_4_2) + '$'),

                CallbackQueryHandler(stool_end_1_1, pattern='^' + str(S_E_1_1) + '$'),
                CallbackQueryHandler(stool_end_1_2, pattern='^' + str(S_E_1_2) + '$'),

                CallbackQueryHandler(stool_end_2_1, pattern='^' + str(S_E_2_1) + '$'),
                CallbackQueryHandler(stool_end_2_2, pattern='^' + str(S_E_2_2) + '$'),

                CallbackQueryHandler(stool_end_3_1, pattern='^' + str(S_E_3_1) + '$'),
                CallbackQueryHandler(stool_end_3_2, pattern='^' + str(S_E_3_2) + '$'),

                # CallbackQueryHandler(dbR_Q_1, pattern='^' + str(R_Q_1) + '$'),
                CallbackQueryHandler(reg_q_1, pattern='^' + str(R_Q_1) + '$'),

                CallbackQueryHandler(reg_q_2_1, pattern='^' + str(R_Q_2_1) + '$'),
                CallbackQueryHandler(reg_q_2_2, pattern='^' + str(R_Q_2_2) + '$'),
                CallbackQueryHandler(reg_q_2_3, pattern='^' + str(R_Q_2_3) + '$'),

                CallbackQueryHandler(reg_q_3_1_1, pattern='^' + str(R_Q_3_1_1) + '$'),
                CallbackQueryHandler(reg_q_3_1_2, pattern='^' + str(R_Q_3_1_2) + '$'),
                CallbackQueryHandler(reg_q_3_2, pattern='^' + str(R_Q_3_2) + '$'),

                CallbackQueryHandler(reg_q_4_1_1, pattern='^' + str(R_Q_4_1_1) + '$'),
                CallbackQueryHandler(reg_q_4_1_2, pattern='^' + str(R_Q_4_1_2) + '$'),
                CallbackQueryHandler(reg_q_4_2_1, pattern='^' + str(R_Q_4_2_1) + '$'),
                CallbackQueryHandler(reg_q_4_2_2, pattern='^' + str(R_Q_4_2_2) + '$'),

                CallbackQueryHandler(reg_q_5_1, pattern='^' + str(R_Q_5_1) + '$'),
                CallbackQueryHandler(reg_q_5_2_1, pattern='^' + str(R_Q_5_2_1) + '$'),
                CallbackQueryHandler(reg_q_5_2_2, pattern='^' + str(R_Q_5_2_2) + '$'),

                CallbackQueryHandler(reg_q_6_1_1, pattern='^' + str(R_Q_6_1_1) + '$'),
                CallbackQueryHandler(reg_q_6_1_2, pattern='^' + str(R_Q_6_1_2) + '$'),
                CallbackQueryHandler(reg_q_6_2_1, pattern='^' + str(R_Q_6_2_1) + '$'),
                CallbackQueryHandler(reg_q_6_2_2, pattern='^' + str(R_Q_6_2_2) + '$'),

                CallbackQueryHandler(reg_end_1, pattern='^' + str(R_E_1) + '$'),
                CallbackQueryHandler(reg_end_2_1, pattern='^' + str(R_E_2_1) + '$'),
                CallbackQueryHandler(reg_end_2_2, pattern='^' + str(R_E_2_2) + '$'),
                CallbackQueryHandler(reg_end_3, pattern='^' + str(R_E_3) + '$'),
                CallbackQueryHandler(start_over, pattern='^' + str(START_OVER) + '$'),
            ],
            SECOND: [
                CallbackQueryHandler(start_over, pattern='^' + str(START_OVER) + '$'),
                CallbackQueryHandler(end, pattern='^' + str(END) + '$'),
            ],
        },
        fallbacks=[MessageHandler(filters.Regex("–î–∞–ª–µ–µ"), firstQue)],
    )

    conv_handler2 = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            CHOOSING: [
                MessageHandler(
                    filters.Regex("^(–í–∞—à–µ –§–ò–û|–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞|–§–ò–û —Ä–µ–±–µ–Ω–∫–∞|–í–æ–∑—Ä–∞—Å—Ç —Ä–µ–±–µ–Ω–∫–∞ –≤ –º–µ—Å—è—Ü–∞—Ö)$"), regular_choice
                ),
                MessageHandler(filters.Regex("–í–æ–∑—Ä–∞—Å—Ç —Ä–µ–±–µ–Ω–∫–∞"), custom_choice),
            ],
            TYPING_CHOICE: [
                MessageHandler(
                    filters.TEXT & ~(filters.COMMAND | filters.Regex("–î–∞–ª–µ")), regular_choice
                )
            ],
            TYPING_REPLY: [
                MessageHandler(
                    filters.TEXT & ~(filters.COMMAND | filters.Regex("–î–∞–ª–µ")),
                    received_information,
                )
            ],
        },
        fallbacks=[CommandHandler("start", start)],
    )

    conv_handler3 = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–æ—Ç?"), info)],
        states={
        },
        fallbacks=[MessageHandler(filters.Regex("–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–æ—Ç?"), info)],
    )

    # –î–æ–±–∞–≤–ª—è–µ–º `ConversationHandler` –≤ –¥–∏—Å–ø–µ—Ç—á–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π
    # –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
    app.add_handler(conv_handler)
    app.add_handler(conv_handler2)
    app.add_handler(conv_handler3)

    app.run_polling()
